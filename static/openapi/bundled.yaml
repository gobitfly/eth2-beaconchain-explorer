openapi: 3.0.4
info:
  title: beaconcha.in API Documentation
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  description: |-
    ## Introduction
    **Advanced and reliable API for accessing comprehensive Ethereum blockchain data.**

    - **Free Usage Policy:** The API is free to use under a fair use policy, with rate limits of 10 requests per minute per IP.
    - **Caching:** All responses are cached for 1 minute.
    - **Higher Usage Plans:** For higher usage plans, visit: [https://beaconcha.in/pricing](https://beaconcha.in/pricing). An API key is required to use these plans.

    ### API Key Usage
    API keys can be obtained at [/user/settings](https://beaconcha.in/user/settings) and must be included in requests either as a query string parameter or in the request header.

    #### Example: Query String Parameter
    ```bash
    curl https://beaconcha.in/api/v1/slot/1?apikey=<your_key>
    ```

    #### Example: Request Header
    ```bash
    curl -H 'apikey: <your_key>' https://beaconcha.in/api/v1/slot/1
    ```
  contact: {}
  version: '1.1'
servers:
  - url: https://beaconcha.in
    description: Ethereum mainnet
  - url: https://hoodi.beaconcha.in
    description: Hoodi Ethereum testnet
security:
  - ApiKeyAuthQuery: []
  - ApiKeyAuthHeader: []
tags:
  - name: Epoch
    description: Data related to consensus layer epochs
  - name: Slots
    description: Data related to consensus layer slots
  - name: Validators
    description: Data related to consensus layer validators
  - name: Rewards
    description: Data related to validator rewards
  - name: Sync Committees
    description: Data related to sync committees
  - name: Rocketpool
    description: Data related to the rocketpool protocol
  - name: ETH.Store®
    description: Data related to the ETH.Store® metric
  - name: Validator deposits
    description: Data related to execution layer validator deposits
  - name: Blocks
    description: Data related to execution layer blocks
  - name: Gas
    description: Data related to gas prices
  - name: Address
    description: Data related to ethereum addresses
  - name: Network
    description: Network data
  - name: Misc
    description: Miscellaneous data
  - name: User
    description: User data
paths:
  /api/healthz:
    get:
      tags:
        - Misc
      summary: Explorer Health
      description: |-
        Provides the health status of all modules of the explorer. This endpoint is useful for monitoring the availability and functionality of the explorer's components.
        - **Modules Monitored:** Includes monitoring of services such as `monitoring_app`, `monitoring_el_data`, `monitoring_services`, `monitoring_cl_data`, `monitoring_api`, `monitoring_redis`.
        - **Response Details:** Returns the status of each module. If all modules are operational, the response will indicate success. Otherwise, it will return an error with details about the failing modules.
      responses:
        '200':
          description: |-
            All modules are healthy. Response format:
            ```
            module monitoring_el_data: OK
            module monitoring_cl_data: OK
            module monitoring_redis: OK
            module monitoring_api: OK
            module monitoring_services: OK
            module monitoring_app: OK
            ```
          content:
            text/plain:
              example: |-
                module monitoring_el_data: OK
                module monitoring_cl_data: OK
                module monitoring_redis: OK
                module monitoring_api: OK
                module monitoring_services: OK
                module monitoring_app: OK
        '400':
          description: |-
            Invalid request. Response format:
            ```
            Bad request
            ```
          content:
            text/plain:
              example: Bad request
        '500':
          description: |-
            Some modules are unhealthy. Response format:
            ```
            module monitoring_el_data: ERROR
            module monitoring_cl_data: OK
            module monitoring_redis: ERROR
            module monitoring_api: OK
            module monitoring_services: OK
            module monitoring_app: ERROR
            ```
          content:
            text/plain:
              example: |-
                module monitoring_el_data: ERROR
                module monitoring_cl_data: OK
                module monitoring_redis: ERROR
                module monitoring_api: OK
                module monitoring_services: OK
                module monitoring_app: ERROR
  /api/healthz-loadbalancer:
    get:
      tags:
        - Misc
      summary: Explorer Availability
      description: Health endpoint to monitor the operational status of the explorer (used for load balancer health checks)
      responses:
        '200':
          description: |-
            Explorer is healthy. Response format:
            ```
            OK. Last epoch is from 1m ago
            ```
          content:
            text/plain:
              example: OK. Last epoch is from 1m ago
        '400':
          description: |-
            Invalid request. Response format:
            ```
            Bad request
            ```
          content:
            text/plain:
              example: Bad request
        '500':
          description: |-
            Explorer is unhealthy. Response format:
            ```
            Internal server error: could not retrieve latest epoch from the db
            ```
          content:
            text/plain:
              example: 'Internal server error: could not retrieve latest epoch from the db'
  /api/v1/chart/{chart}:
    get:
      tags:
        - Misc
      summary: Chart
      description: Returns charts from the page https://beaconcha.in/charts as PNG
      parameters:
        - name: chart
          in: path
          description: Chart Names
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - blocks
              - validators
              - staked_ether
              - average_balance
              - network_liveness
              - participation_rate
              - stake_effectiveness
              - balance_distribution
              - effective_balance_distribution
              - performance_distribution_365d
              - deposits
              - withdrawals
              - graffiti_wordcloud
              - pools_distribution
              - historic_pool_performance
              - avg_gas_used_chart_data
              - execution_burned_fees
              - block_gas_used
              - block_count_chart_data
              - block_time_avg_chart_data
              - avg_gas_limit_chart_data
              - avg_block_util_chart_data
              - tx_count_chart_data
            example: validators
      responses:
        '200':
          description: Chart PNG image generated successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
                description: PNG image file containing the requested chart
        '400':
          description: Bad Request - Invalid chart name or no data available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalid_chart:
                  summary: Invalid chart name
                  value:
                    status: 'ERROR: invalid chart name'
                    data: null
                no_data:
                  summary: No data available
                  value:
                    status: 'ERROR: no data available for the requested chart'
                    data: null
  /api/v1/ens/lookup/{domain}:
    get:
      tags:
        - ENS
      summary: Resolve ens name or address
      description: Get the address for an ens name and vice versa. Returns and object with the ens name and address - if found.
      parameters:
        - name: domain
          in: path
          description: domain can either be an ens name or an Etherum address
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: vitalik.eth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.EnsDomainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
  /api/v1/epoch/{epoch}:
    get:
      tags:
        - Epochs
      summary: Epoch overview
      description: Retrieve aggregate metrics and status for a beacon chain epoch. You can specify the epoch by number, or use the keywords `latest` (most recently processed epoch) or `finalized` (most recent epoch finalized by the consensus).
      operationId: getEpoch
      parameters:
        - name: epoch
          in: path
          description: The epoch to fetch. Provide an integer epoch number (>= 0), or one of the keywords `latest` or `finalized`.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: string
                description: Special tags for convenience.
                enum:
                  - latest
                  - finalized
                example: latest
              - type: integer
                description: Epoch number (>= 0)
                minimum: 0
                example: 1564648
      responses:
        '200':
          description: The epoch was found and aggregate information is returned in the `data` field.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.APIEpochResponse'
        '400':
          description: The request is invalid (for example, an out-of-range epoch or malformed tag).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidEpoch:
                  summary: Invalid epoch number
                  value:
                    status: 'ERROR: invalid epoch parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/epoch/{epoch}/slots:
    get:
      tags:
        - Epochs
      summary: Epoch slots
      description: Retrieve all slots within a specific epoch, including per-slot block metadata such as proposer, roots, operation counts, sync committee participation, and execution payload details when available. You can specify the epoch by number, or use the keywords `latest` (most recently processed epoch) or `finalized` (most recent finalized epoch).
      operationId: listEpochSlots
      parameters:
        - name: epoch
          in: path
          description: The epoch to fetch. Provide an integer epoch number (>= 0), or one of the keywords `latest` or `finalized`.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: string
                description: Special tags for convenience.
                enum:
                  - latest
                  - finalized
                example: latest
              - type: integer
                description: Epoch number (>= 0)
                minimum: 0
                example: 1564648
      responses:
        '200':
          description: The epoch was found and all slots for the epoch are returned in the `data` field as an array. Each item describes one slot.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APISlotResponse'
        '400':
          description: The request is invalid (for example, an out-of-range epoch or malformed tag).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidEpoch:
                  summary: Invalid epoch parameter
                  value:
                    status: 'ERROR: invalid epoch parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/eth1deposit/{txhash}:
    get:
      tags:
        - Validator deposits
      summary: Deposits by execution transaction hash
      description: Retrieve all beacon chain validator deposit events associated with a specific execution-layer transaction hash. This endpoint returns every deposit log decoded from the transaction, including deposit amount, validator public key, withdrawal credentials, and signature verification status.
      operationId: getEth1DepositsByTxHash
      parameters:
        - name: txhash
          in: path
          description: Execution-layer transaction hash to inspect. Provide tx hash as a 0x-prefixed hex string (64 hex characters after 0x).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.EthTxHash'
      responses:
        '200':
          description: The transaction was found and any associated deposit events are returned in the `data` array. If the transaction contains no deposit events, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIEth1TxDepositResponse'
        '400':
          description: The request is invalid (for example, a malformed or non-hex transaction hash).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidTxHash:
                  summary: Invalid transaction hash
                  value:
                    status: 'ERROR: invalid tx hash parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/ethstore/{day}:
    get:
      tags:
        - ETH.Store®
      summary: ETH.Store daily aggregates
      description: |-
        Retrieve ETH.Store® daily aggregate metrics that represent the average financial return validators achieved over a 24-hour period. A "beaconchain-day" is defined as the number of full days elapsed since chain genesis, computed as blocks grouped into periods of `(24 * 60 * 60) // SlotsPerEpoch // SecondsPerSlot` epochs.
        Use this endpoint to analyze validator returns, moving averages, and reward composition (consensus-layer vs. execution-layer fees) on a per-day basis.
        See https://github.com/gobitfly/eth.store for additional context.
      operationId: getEthStoreByDay
      parameters:
        - name: day
          in: path
          description: The beaconchain-day to fetch. Provide an integer day index (>= 0), or the keyword `latest` for the most recently computed day.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: string
                description: Special tag for convenience.
                enum:
                  - latest
                example: latest
              - type: integer
                description: Day index since genesis (>= 0)
                minimum: 0
                example: 541
      responses:
        '200':
          description: The requested day was found and ETH.Store® aggregates are returned in the `data` array. This array contains a single record for the requested day.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIEthStoreResponse'
        '400':
          description: The request is invalid (for example, an out-of-range day or malformed tag).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidDay:
                  summary: Invalid day parameter
                  value:
                    status: 'ERROR: invalid day parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/execution/address/{address}:
    get:
      tags:
        - Addresses
      summary: Execution address balances
      description: Retrieve the native ETH balance and ERC-20 token balances for an Ethereum address. The response includes at most 200 distinct ERC-20 tokens. To fetch all tokens beyond this limit, call `/api/v1/execution/address/{address}/erc20tokens`.
      operationId: getExecutionAddressBalances
      parameters:
        - name: address
          in: path
          description: Ethereum account address to query. Provide a 0x-prefixed, 20-byte hex string (40 hexadecimal characters after 0x).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.EthAddress'
        - name: token
          in: query
          description: Optional ERC-20 contract address to filter the result to a single token. Provide a 0x-prefixed, 20-byte hex address.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/primitives.EthAddress'
      responses:
        '200':
          description: Balances were retrieved successfully. The `data` object contains the address, native ETH balance, and a list of ERC-20 token balances.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.ApiEth1AddressResponse'
        '400':
          description: The request is invalid (for example, a malformed address or token filter).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidAddress:
                  summary: Invalid address parameter
                  value:
                    status: 'ERROR: invalid address parameter'
                    data: null
                invalidToken:
                  summary: Invalid token filter parameter
                  value:
                    status: 'ERROR: invalid token parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/execution/address/{address}/erc20tokens:
    get:
      tags:
        - Addresses
      summary: ERC-20 token balances for an address
      description: Retrieve a paginated list of ERC-20 token balances for a specific Ethereum address. Use this endpoint to list all token balances when the number of tokens exceeds the 200-token limit returned by the summary endpoint `/api/v1/execution/address/{address}`. Use the `offset` and `limit` query parameters to paginate through the complete set.
      operationId: listExecutionAddressERC20Tokens
      parameters:
        - name: address
          in: path
          description: Ethereum account address to query. Provide a 0x-prefixed, 20-byte hex string (40 hexadecimal characters after 0x).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.EthAddress'
        - name: offset
          in: query
          description: Number of items to skip from the start of the result set. Use 0 for the first page.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 0
            default: 0
        - name: limit
          in: query
          description: Maximum number of tokens to return per page. Allowed range is 1 to 200.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 50
      responses:
        '200':
          description: Tokens were retrieved successfully. The `data` array contains one entry per ERC-20 token for which a balance is available for the address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiEth1AddressERC20TokenResponse'
        '400':
          description: The request is invalid (for example, a malformed address or out-of-range pagination parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidAddress:
                  summary: Invalid address parameter
                  value:
                    status: 'ERROR: invalid address parameter'
                    data: null
                invalidPagination:
                  summary: Invalid pagination parameters
                  value:
                    status: 'ERROR: invalid pagination parameters'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/execution/block/{blockNumber}:
    get:
      tags:
        - Blocks
      summary: Execution block overview
      description: Retrieve one or more execution-layer blocks by block number. Provide block numbers as a comma-separated list in the `blockNumber` path segment (up to 100 values). The response includes per-block metadata, rewards, consensus linkage, and relay information when available.
      operationId: getExecutionBlocksByNumber
      parameters:
        - name: blockNumber
          in: path
          description: One or more execution block numbers as a comma-separated list. Each item must be a non-negative integer. A maximum of 100 block numbers is allowed per request.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: integer
              minimum: 0
            maxItems: 100
          example: 17000000,17000001,17000002
      responses:
        '200':
          description: Matching blocks were found. The `data` array contains one item per retrieved block. If a provided block number is not found, it is omitted from the result.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ExecutionBlockApiResponse'
        '400':
          description: The request is invalid (for example, malformed numbers or more than 100 values).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidBlockNumber:
                  summary: Invalid block number
                  value:
                    status: 'ERROR: invalid block number'
                    data: null
                tooManyBlockNumbers:
                  summary: Too many values
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/execution/gasnow:
    get:
      tags:
        - Gas
      summary: Current gas price recommendations
      description: 'Retrieve current execution-layer fee recommendations and ETH price snapshot. The response provides four fee tiers expressed as wei per gas, each corresponding to a target inclusion time: rapid (≈15 seconds), fast (≈1 minute), standard (≈3 minutes), and slow (>10 minutes). The payload also includes a Unix millisecond timestamp and an ETH/USD price snapshot.'
      operationId: getExecutionGasNow
      responses:
        '200':
          description: Current fee recommendations and price snapshot were retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.GasNowPageData'
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                notAvailable:
                  summary: Gasnow data not available
                  value:
                    status: 'ERROR: gasnow data is currently not available'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/execution/{addressIndexOrPubkey}/produced:
    get:
      tags:
        - Blocks
      summary: Execution blocks produced by fee recipient, proposer index, or pubkey
      description: |-
        Retrieve execution-layer blocks attributed to one or more producers. You can filter by fee recipient address (execution coinbase), beacon-chain proposer index, or validator public key. Provide one or more identifiers as a comma-separated list in the `addressIndexOrPubkey` path segment.
        You may mix identifiers, but mixing with a non-zero `offset` can skip items because pagination is applied after merging results. Limits: up to 20 fee recipient addresses and up to 100 proposer indices or pubkeys per request. ENS names are supported for addresses.
      operationId: listExecutionProducedBlocks
      parameters:
        - name: addressIndexOrPubkey
          in: path
          description: |-
            Comma-separated list of producers to query. Each item may be: - a fee recipient address (0x-prefixed, 20-byte hex, or a valid ENS name), - a proposer index (non-negative integer), or - a validator public key (0x-prefixed, 48-byte BLS pubkey: 96 hex characters).
            Provide multiple items by separating them with commas. A maximum of 20 addresses and 100 indices/pubkeys is accepted per request.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/primitives.EthAddress'
                - type: integer
                  minimum: 0
                  description: Proposer index (>= 0)
                - type: string
                  pattern: ^0x[a-fA-F0-9]{96}$
                  description: Validator public key (48 bytes; 0x-prefixed hex with 96 hex characters)
          example: 0x4838b106fce9647bdf1e7877bf73ce8b0bad5f97,325,0xa6831544f1e9fb1086b023f0852fe7feb7ed6606bf57c76d26a5dbf0027c125e8f7b76b000d99b676205d7721c1baf81
        - name: offset
          in: query
          description: Number of items to skip from the start of the merged result set. Use 0 for the first page.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - name: limit
          in: query
          description: Maximum number of blocks to return. Allowed range is 1 to 100.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 20
        - name: sort
          in: query
          description: Sort order by execution block number.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
            example: desc
      responses:
        '200':
          description: Blocks were retrieved successfully. The `data` array contains one item per execution block produced by any of the specified producers, sorted according to the `sort` parameter.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ExecutionBlockApiResponse'
        '400':
          description: The request is invalid (for example, a malformed address/pubkey or too many addresses provided).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid address, validator index, or pubkey
                  value:
                    status: 'ERROR: invalid address, validator index or pubkey parameter'
                    data: null
                tooManyAddresses:
                  summary: Too many addresses
                  value:
                    status: 'ERROR: you are only allowed to query up to max 20 addresses'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/graffitiwall:
    get:
      tags:
        - Misc
      summary: Graffiti wall pixels
      description: |-
        Retrieve pixels painted on the community graffiti wall within a rectangular area and a slot range. Coordinates are expressed in pixels with the origin at the top-left corner (x = 0, y = 0). Boundary coordinates are inclusive.
        If you do not provide a slot, the service returns pixels from the most recent 10,000 slots. You can expand the time window by setting `slot` (end of range) and optionally `startSlot` (start of range). When `startSlot` is omitted, it defaults to `slot - 10000`.
        Use `summarize=true` to receive only the final color per pixel within the requested slot range (end state). When `summarize=false` or omitted, the API returns the full sequence of changes within the range.
      operationId: getGraffitiWall
      parameters:
        - name: startx
          in: query
          description: Inclusive start X coordinate (>= 0). If omitted, the full X range is used.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: starty
          in: query
          description: Inclusive start Y coordinate (>= 0). If omitted, the full Y range is used.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: endx
          in: query
          description: Inclusive end X coordinate (>= startx). If omitted, the full X range is used.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 511
        - name: endy
          in: query
          description: Inclusive end Y coordinate (>= starty). If omitted, the full Y range is used.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 511
        - name: startSlot
          in: query
          description: Start of the slot range (inclusive). Defaults to `slot - 10000` when omitted.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 12754598
        - name: slot
          in: query
          description: End of the slot range (inclusive). Defaults to the latest processed slot when omitted.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 12764598
        - name: summarize
          in: query
          description: When true, return only the final state for each pixel within the requested rectangle and slot range. When false (default), return every change to pixels within the range.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Pixels were retrieved successfully. The `data` array contains one entry per painted pixel event (or one per pixel when `summarize=true`).
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.GraffitiwallResponse'
        '400':
          description: The request is invalid (for example, coordinates out of bounds or malformed slot parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidArea:
                  summary: Invalid coordinate rectangle
                  value:
                    status: 'ERROR: invalid area coordinates'
                    data: null
                invalidSlot:
                  summary: Invalid slot parameters
                  value:
                    status: 'ERROR: invalid slot parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/latestState:
    get:
      tags:
        - Network
      summary: Latest consensus and execution state
      description: Retrieve the latest known network state as observed by the explorer backend. The payload includes current slot and epoch numbers, the most recent finalized epoch, a finality delay indicator, a syncing flag, and display rates used for price conversions in the UI.
      operationId: getLatestState
      responses:
        '200':
          description: Latest state was retrieved successfully. The `data` object contains the current chain status and pricing context.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.LatestState'
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request
                  value:
                    status: 'ERROR: invalid request'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/rocketpool/stats:
    get:
      tags:
        - Rocketpool
      summary: Rocket Pool network statistics
      description: |-
        Retrieve current Rocket Pool protocol statistics as observed by the explorer backend. Use this endpoint to monitor network-level metrics including node and minipool counts, rETH supply, rETH exchange rate and APR, claim interval timing, and protocol balances.
        Responses are cached for one minute and subject to the API's standard rate limits. You do not provide any request parameters for this endpoint.
      operationId: getRocketpoolStats
      responses:
        '200':
          description: Rocket Pool statistics retrieved successfully. The `data` object contains current Rocket Pool network metrics.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.APIRocketpoolStatsResponse'
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidRequest:
                  summary: Invalid request
                  value:
                    status: 'ERROR: invalid request'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/rocketpool/validator/{indexOrPubkey}:
    get:
      tags:
        - Rocketpool
      summary: Get Rocket Pool validator metadata by index or pubkey
      description: |
        Retrieve Rocket Pool–specific metadata for one or more Ethereum consensus validators.

        You provide a comma-separated list of validator identifiers in the path parameter. The
        server resolves each identifier to a validator index and returns the corresponding
        Rocket Pool minipool and node data.

        Response shape:
        - If you request a single validator, the response data field is a single object.
        - If you request multiple validators, the data field is an array of objects in no
          guaranteed order.

        Use this endpoint to answer questions such as:
        - What is the current minipool status and node fee for a validator?
        - Has the node opted into the smoothing pool, and how much has been claimed or remains unclaimed?
        - What are the node’s RPL stake metrics (effective, min, max)?
      parameters:
        - name: indexOrPubkey
          in: path
          description: |
            Comma-separated list (no spaces) of validator identifiers to query. Each identifier may be either:
            - A validator index as a base-10 integer (for example, 652648)
            - A BLS public key as a 96-hex-character string with or without the 0x prefix (case-insensitive)

            Limits and resolution behavior:
            - You can pass up to a server-enforced per-request limit. The default limit is 100.
            - Public keys that cannot be resolved to an existing validator index cause the request to fail with HTTP 400.
            - Duplicate identifiers are de-duplicated internally.
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Successful response with Rocket Pool validator data.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/types.ApiRocketpoolValidatorResponse'
        '400':
          description: The request is invalid. This occurs when the identifier list exceeds the allowed limit or contains values that cannot be parsed or resolved to validator indices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
  /api/v1/slot/{slotOrHash}:
    get:
      tags:
        - Slots
      summary: Slot overview
      description: Retrieve a beacon chain slot by slot number or block root. You can also use the keywords `latest` (most recently processed slot) or `head` (slot of the current head block).
      operationId: getSlot
      parameters:
        - name: slotOrHash
          in: path
          description: The slot to fetch. Provide an integer slot number (>= 0), the special tags `latest` or `head`, or a 0x-prefixed 32-byte block root hash (64 hex characters after 0x).
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: integer
                minimum: 0
                description: Slot number (>= 0)
                example: 12751457
              - type: string
                description: Special tag for convenience.
                enum:
                  - latest
                  - head
                example: latest
              - type: string
                description: Beacon block root (32 bytes; 0x-prefixed hex with 64 hex characters)
                pattern: ^0x[a-fA-F0-9]{64}$
                example: '0xeb64c069b979ef8eed41993ec0563f1ed0e935b95fcbe9ed26de4c904c94aeb3'
      responses:
        '200':
          description: The slot was found and details are returned in the `data` field.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.APISlotResponse'
        '400':
          description: The request is invalid (for example, a malformed hash or negative slot).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidSlotOrHash:
                  summary: Invalid slot or hash parameter
                  value:
                    status: 'ERROR: invalid slot or hash parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/slot/{slot}/attestations:
    get:
      tags:
        - Slots
      summary: Attestations for a slot
      description: Retrieve all attestations included in the beacon block for a specific slot. You can provide a slot number or the keyword `latest` to fetch attestations from the most recently processed slot. The response lists each aggregated attestation with its source/target checkpoints, committee index, and the participating validators.
      operationId: listSlotAttestations
      parameters:
        - name: slot
          in: path
          description: The slot to fetch. Provide an integer slot number (>= 0) or the special tag `latest` for the most recently processed slot.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: integer
                minimum: 0
                description: Slot number (>= 0)
                example: 12751688
              - type: string
                enum:
                  - latest
                description: Latest processed slot
                example: latest
      responses:
        '200':
          description: The slot was found and its attestations are returned in the `data` array. If the slot has no attestations, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIAttestationResponse'
        '400':
          description: The request is invalid (for example, a negative slot or a slot in the future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidSlot:
                  summary: Invalid slot parameter
                  value:
                    status: 'ERROR: invalid slot parameter'
                    data: null
                slotInFuture:
                  summary: Slot in the future
                  value:
                    status: 'ERROR: slot is in the future'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/slot/{slot}/attesterslashings:
    get:
      tags:
        - Slots
      summary: Attester slashings for a slot
      description: Retrieve all attester slashing operations included in the beacon block for a specific slot. You can provide a slot number or the keyword `latest` to fetch from the most recently processed slot. Each item contains the two conflicting attestations that triggered the slashing and the block inclusion metadata.
      operationId: listSlotAttesterSlashings
      parameters:
        - name: slot
          in: path
          description: The slot to fetch. Provide an integer slot number (>= 0) or the special tag `latest` for the most recently processed slot.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: integer
                minimum: 0
                description: Slot number (>= 0)
                example: 12751688
              - type: string
                enum:
                  - latest
                description: Latest processed slot
                example: latest
      responses:
        '200':
          description: The slot was found and its attester slashings are returned in the `data` array. If the slot has no attester slashings, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIAttesterSlashingResponse'
        '400':
          description: The request is invalid (for example, a negative slot or a slot in the future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidSlot:
                  summary: Invalid slot parameter
                  value:
                    status: 'ERROR: invalid slot parameter'
                    data: null
                slotInFuture:
                  summary: Slot in the future
                  value:
                    status: 'ERROR: slot is in the future'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/slot/{slot}/deposits:
    get:
      tags:
        - Slots
      summary: Deposits for a slot
      description: Retrieve all validator deposit operations included in the beacon block for a specific slot. Deposits include the validator public key, withdrawal credentials, amount (gwei), and signature. Use pagination parameters to page through results when many deposits are present.
      operationId: listSlotDeposits
      parameters:
        - name: slot
          in: path
          description: The slot to fetch. Provide an integer slot number (>= 0) or the special tag `latest` for the most recently processed slot.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: integer
                minimum: 0
                description: Slot number (>= 0)
                example: 12751688
              - type: string
                enum:
                  - latest
                description: Latest processed slot
                example: latest
        - name: offset
          in: query
          description: Number of items to skip from the start of the result set. Use 0 for the first page.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - name: limit
          in: query
          description: Upper bound for the range of items to return. The effective page size is computed as min(100, limit - offset). Must be greater than `offset`. To request N items, set limit = offset + N. When omitted or out of range, the service uses offset + 100.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            example: 40
      responses:
        '200':
          description: The slot was found and its deposits are returned in the `data` array. If the slot has no deposits, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIDepositsResponse'
        '400':
          description: The request is invalid (for example, a negative slot or malformed parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidSlot:
                  summary: Invalid slot parameter
                  value:
                    status: 'ERROR: invalid block slot provided'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/slot/{slot}/proposerslashings:
    get:
      tags:
        - Slots
      summary: Proposer slashings
      description: Returns the proposer slashings included in a specific slot
      parameters:
        - name: slot
          in: path
          description: Slot
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - properties:
                      data:
                        title: ProposerSlashings
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIProposerSlashingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
  /api/v1/slot/{slot}/voluntaryexits:
    get:
      tags:
        - Slots
      summary: Voluntary exits for a slot
      description: |-
        Retrieve all voluntary exit operations included in the beacon block for a specific slot. A voluntary exit is a signed message from a validator indicating the epoch at which they choose to exit the active set.
        Provide a slot number or use the keyword `latest` to fetch from the most recently processed slot. The response lists each voluntary exit along with block inclusion metadata.
      operationId: listSlotVoluntaryExits
      parameters:
        - name: slot
          in: path
          description: The slot to fetch. Provide an integer slot number (>= 0) or the special tag `latest` for the most recently processed slot.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: integer
                minimum: 0
                description: Slot number (>= 0)
                example: 12751688
              - type: string
                enum:
                  - latest
                description: Latest processed slot
                example: latest
      responses:
        '200':
          description: The slot was found and its voluntary exits are returned in the `data` array. If the slot has no voluntary exits, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIVoluntaryExitResponse'
        '400':
          description: The request is invalid (for example, a negative slot or a slot in the future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidSlot:
                  summary: Invalid slot parameter
                  value:
                    status: 'ERROR: invalid slot parameter'
                    data: null
                slotInFuture:
                  summary: Slot in the future
                  value:
                    status: 'ERROR: slot is in the future'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/slot/{slot}/withdrawals:
    get:
      tags:
        - Slots
      summary: Withdrawals for a slot
      description: |-
        Retrieve all withdrawal operations included in the execution payload of the beacon block for a specific slot. A withdrawal moves ETH from the beacon chain to an execution-layer address after a validator has eligible balance.
        Provide a slot number or use the keyword `latest` to fetch from the most recently processed slot. The response lists each withdrawal with the recipient address, amount in gwei, the originating validator index, and the global withdrawal index.
      operationId: listSlotWithdrawals
      parameters:
        - name: slot
          in: path
          description: The slot to fetch. Provide an integer slot number (>= 0) or the special tag `latest` for the most recently processed slot.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: integer
                minimum: 0
                description: Slot number (>= 0)
                example: 12751688
              - type: string
                enum:
                  - latest
                description: Latest processed slot
                example: latest
      responses:
        '200':
          description: The slot was found and its withdrawals are returned in the `data` array. If the slot has no withdrawals, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.APIWithdrawalResponse'
        '400':
          description: The request is invalid (for example, a negative slot or a slot in the future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidSlot:
                  summary: Invalid slot parameter
                  value:
                    status: 'ERROR: invalid block slot provided'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/sync_committee/{period}:
    get:
      tags:
        - Sync Committees
      summary: Sync committee for a period
      description: |-
        Retrieve the sync committee membership for a given sync period. The sync committee contains 512 validator indices that participate in light-client finality via sync committee signatures. The validators in the response are ordered by the sync-committee index (the position used when interpreting syncaggregate_bits in blocks).
        A sync period spans 256 consecutive epochs. Sync committees were introduced with the Altair upgrade. Requests for periods before Altair return an error because no sync committee exists for those periods. On Ethereum mainnet, Altair activated at epoch 74240 (period 290).
      operationId: getSyncCommittee
      parameters:
        - name: period
          in: path
          description: 'The sync period to fetch. Provide a non-negative integer period index, or use one of the special tags: `latest` (current period) or `next` (the upcoming period if available).'
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: string
                description: Special tags for convenience.
                enum:
                  - latest
                  - next
                example: latest
              - type: integer
                description: Sync period index (>= 0)
                minimum: 0
                example: 500
      responses:
        '200':
          description: The sync committee for the requested period was found. The `data` object contains the period index, the start and end epochs, and the list of 512 validator indices in committee order.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.APISyncCommitteeResponse'
        '400':
          description: The request is invalid (for example, a malformed period or a period before Altair).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidPeriod:
                  summary: Invalid period parameter
                  value:
                    status: 'ERROR: invalid period parameter'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator:
    post:
      tags:
        - Validators
      summary: Validators overview (POST)
      description: Retrieve validator information by index or public key using a JSON request body.  Use this endpoint when the list of identifiers is too long for the GET path parameter.  Provide up to 100 identifiers (higher limits may apply to authenticated premium users)  as a comma-separated string in the `indicesOrPubkey` field. Each identifier must be  either a validator index (base-10 integer) or a 48-byte BLS public key as 0x-prefixed hex  (96 hex characters after 0x) or without the 0x prefix.
      operationId: postValidators
      requestBody:
        description: Comma-separated list of validator indices and/or public keys to query (maximum 100 items by default).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/types.DashboardRequest'
        required: true
      responses:
        '200':
          description: Matching validators were retrieved successfully. The `data` field contains either a single validator object (when one identifier is provided/resolved) or an array of validator objects (when multiple identifiers are provided/resolved).
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - title: Multiple validators
                            type: array
                            items:
                              $ref: '#/components/schemas/types.APIValidatorResponse'
                          - title: Single validator
                            $ref: '#/components/schemas/types.APIValidatorResponse'
        '400':
          description: The request is invalid (for example, malformed body, too many identifiers, or unresolved pubkeys).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/eth1/{eth1address}:
    get:
      tags:
        - Validators
      summary: Validators by deposit address
      description: |-
        Retrieve validators that have made deposits from a specific execution-layer address. The service inspects DepositContract events where the `from_address` equals the provided address and groups results by validator public key.
        Use this endpoint to identify validators funded by an address. ENS names are supported for the path parameter when they resolve to a 0x-prefixed address at request time.
      operationId: getValidatorsByEth1Address
      parameters:
        - name: eth1address
          in: path
          description: Execution-layer address whose deposit transactions you want to inspect. Provide a 0x-prefixed, 20-byte hex string (40 hex characters after 0x). ENS names are accepted and resolved server-side when provided.
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.EthAddress'
        - name: limit
          in: query
          description: Maximum number of records to return. Allowed range is 1 to 2000. Defaults to 2000.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 2000
            default: 2000
            example: 100
        - name: offset
          in: query
          description: Number of items to skip from the start of the result set. Use 0 for the first page.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
      responses:
        '200':
          description: Matching validators were found. The `data` array contains one entry per unique validator public key that deposited from the specified address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorEth1Response'
        '400':
          description: The request is invalid (for example, a malformed address or out-of-range pagination parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidAddress:
                  summary: Invalid address parameter
                  value:
                    status: 'ERROR: invalid eth1 address provided'
                    data: null
                invalidPagination:
                  summary: Invalid pagination parameters
                  value:
                    status: 'ERROR: invalid pagination parameters'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/leaderboard:
    get:
      tags:
        - Rewards
      summary: Validator performance leaderboard
      description: Retrieve the current top 100 validators ranked by 7-day consensus-layer rewards. This endpoint does not accept query parameters.
      operationId: getValidatorLeaderboard
      responses:
        '200':
          description: Leaderboard retrieved successfully. The `data` array contains one entry per validator with performance metrics.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorPerformanceResponse'
        '400':
          description: The request is invalid or results could not be retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                badRequest:
                  summary: Failed to retrieve results
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/stats/{index}:
    get:
      tags:
        - Validators
      summary: Daily validator statistics
      description: Retrieve per-day statistics for a single validator by index. Use this endpoint to obtain balance snapshots (in gwei), duty counts (attestations, block proposals, sync committee), and deposit/withdrawal activity aggregated per beaconchain-day. When `start_day` is omitted, the API returns all days up to `end_day` (which defaults to the latest exported day).
      operationId: getValidatorDailyStats
      parameters:
        - name: index
          in: path
          description: Validator index to query (>= 0).
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            minimum: 0
            example: 49949
        - name: end_day
          in: query
          description: Last day index to include (inclusive). Defaults to the latest exported day.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 1774
        - name: start_day
          in: query
          description: First day index to include (inclusive). Must be less than or equal to `end_day`. When omitted, the API returns all days up to `end_day`.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 1700
      responses:
        '200':
          description: Matching daily records were retrieved successfully. The `data` array contains one entry per day, ordered from newest to oldest.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        title: DailyStats
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorDailyStatsResponse'
        '400':
          description: The request is invalid (for example, a malformed index, invalid `start_day` or `end_day`, or `start_day > end_day`).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidIndex:
                  summary: Invalid validator index
                  value:
                    status: 'ERROR: invalid validator index'
                    data: null
                invalidEndDay:
                  summary: Invalid end_day parameter
                  value:
                    status: 'ERROR: invalid end_day parameter'
                    data: null
                invalidStartDay:
                  summary: Invalid start_day parameter
                  value:
                    status: 'ERROR: invalid start_day parameter'
                    data: null
                startAfterEnd:
                  summary: start_day must be <= end_day
                  value:
                    status: 'ERROR: start_day must be less than end_day'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/withdrawalCredentials/{withdrawalCredentialsOrEth1address}:
    get:
      tags:
        - Validators
      summary: Validators by withdrawal credentials or address
      description: |-
        Retrieve validators whose withdrawal credentials match the provided value, or whose credentials correspond to the provided execution-layer address. You can specify either a 32-byte withdrawal credentials value or a 0x-prefixed Ethereum address. When you provide an address, the service derives the corresponding withdrawal credentials (prefix 0x01) and returns validators whose credentials equal that value.
        ENS names are accepted for the address form when they resolve to a 0x-prefixed address at request time. The lookup is case-insensitive and accepts inputs with or without the 0x prefix.
      operationId: getValidatorsByWithdrawalCredentials
      parameters:
        - name: withdrawalCredentialsOrEth1address
          in: path
          description: Withdrawal credentials (32 bytes; 0x-prefixed hex) or an execution-layer address (0x-prefixed, 20-byte hex). ENS names are accepted for the address form.
          required: true
          style: simple
          explode: false
          schema:
            oneOf:
              - type: string
                description: Withdrawal credentials (32 bytes; 0x-prefixed hex with 64 hex characters).
                pattern: ^0x[a-fA-F0-9]{64}$
                example: '0x01000000000000000000000026e8ce0d6c1424566ff8d584d1409b9fe651f27d'
              - $ref: '#/components/schemas/primitives.EthAddress'
        - name: limit
          in: query
          description: Maximum number of validators to return. Defaults to 10. Allowed range is 1 to 200 for standard users; higher limits may be available to premium accounts.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 10
            example: 100
        - name: offset
          in: query
          description: Number of items to skip from the start of the result set. Use 0 for the first page.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
      responses:
        '200':
          description: Matching validators were found. The `data` array contains one entry per validator whose withdrawal credentials equal the derived or provided value.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiWithdrawalCredentialsResponse'
        '400':
          description: The request is invalid (for example, malformed credentials/address or database error).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid withdrawal credentials or address
                  value:
                    status: 'ERROR: invalid withdrawal credentials or eth1 address provided'
                    data: null
                dbError:
                  summary: Database retrieval error
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}:
    get:
      tags:
        - Validators
      summary: Validators overview
      description: Retrieve validator information by index or public key using a comma-separated list in the path parameter. Provide up to 100 identifiers (higher limits may apply to authenticated premium users). Each identifier must be either a validator index (base-10 integer) or a 48-byte BLS public key as 0x-prefixed hex (96 hex characters after 0x) or without the 0x prefix. Use the POST variant (`/api/v1/validator`) when the list is too long for a URL.
      operationId: getValidators
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Matching validators were retrieved successfully. The `data` field contains either a single validator object (when one identifier is provided/resolved) or an array of validator objects (when multiple identifiers are provided/resolved).
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - title: Multiple validators
                            type: array
                            items:
                              $ref: '#/components/schemas/types.APIValidatorResponse'
                          - title: Single validator
                            $ref: '#/components/schemas/types.APIValidatorResponse'
        '400':
          description: The request is invalid (for example, malformed identifier, too many identifiers, or unresolved pubkeys).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/attestationefficiency:
    get:
      tags:
        - Validators
      summary: Attestation efficiency
      description: |-
        Retrieve normalized attestation inclusion effectiveness for one or more validators. Provide a comma-separated list of validator indices or 0x-prefixed BLS pubkeys (up to the server-enforced limit; default 100).
        The score is computed for the most recently completed epoch and defined as: `score = 1 + (1 − percentage/100) = 2 − percentage/100`. A score of 1.0 indicates perfect effectiveness (100% inclusion); scores approach 2.0 as effectiveness worsens (0% inclusion).
      operationId: getValidatorAttestationEfficiency
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Matching validators were retrieved successfully. The `data` array contains one entry per validator with the normalized attestation effectiveness score.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorAttestationEfficiencyResponse'
        '400':
          description: The request is invalid (for example, malformed identifier, too many identifiers, or unresolved pubkeys).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/attestations:
    get:
      tags:
        - Validators
      summary: Validator attestations history
      description: |-
        Retrieve attestations observed for one or more validators within a bounded epoch window. By default, the service returns data for the last 100 epochs ending at the latest processed epoch. You can narrow the range with `startEpoch` and `endEpoch`, which must lie within `[latest-99, latest]` and satisfy `startEpoch <= endEpoch`.
        Each item represents a scheduled attestation duty for a validator and includes the slot attested to, the inclusion slot when observed, a status flag, and convenience week boundaries for grouping in UI charts.
        When `slim=true`, the response omits the `week`, `week_start`, `week_end`, and `committeeindex` properties from each item to reduce payload size.
      operationId: listValidatorAttestations
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
        - name: startEpoch
          in: query
          description: Start epoch for the query window. Defaults to `latest - 99`. Must be within `[latest-99, latest]` and less than or equal to `endEpoch` when provided.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 399260
        - name: endEpoch
          in: query
          description: End epoch for the query window. Defaults to `latest`. Must be within `[startEpoch, latest]` when provided.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 399359
        - name: slim
          in: query
          description: When true, return a slimmed response that excludes `week`, `week_start`, `week_end`, and `committeeindex` fields from each item.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
            example: true
      responses:
        '200':
          description: Matching attestations were retrieved successfully. The `data` array contains one entry per scheduled attestation for the specified validators within the requested epoch window. Items are sorted by epoch (descending) and then by validator index (ascending).
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorAttestationsResponse'
        '400':
          description: The request is invalid (for example, malformed identifiers, out-of-range epochs, or too many identifiers).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                invalidStartEpoch:
                  summary: Invalid startEpoch
                  value:
                    status: 'ERROR: invalid start epoch parameter'
                    data: null
                invalidEndEpoch:
                  summary: Invalid endEpoch
                  value:
                    status: 'ERROR: invalid end epoch parameter'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/balancehistory:
    get:
      tags:
        - Validators
      summary: Validator balance history
      description: |-
        Retrieve per-epoch balance history for one or more validators. Provide a comma-separated list of validator indices or 0x-prefixed BLS pubkeys in the path parameter (up to the server-enforced limit; default 100).
        Use the optional query parameters to control the time window: - latest_epoch: the most recent epoch to include (defaults to the latest processed epoch) - offset: number of epochs to step back from latest_epoch before starting the window - limit: number of epochs to return (1..100, defaults to 100)
        The response contains one item per validator per epoch within the window, including the balance and effective balance in gwei, and week grouping metadata for downstream charting.
      operationId: listValidatorBalanceHistory
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
        - name: latest_epoch
          in: query
          description: Most recent epoch to include (inclusive). Defaults to the latest processed epoch. Must be less than or equal to the latest processed epoch.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 54656
        - name: offset
          in: query
          description: Number of epochs to skip backwards from `latest_epoch` before starting the window. Must be non-negative and not exceed `latest_epoch`.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - name: limit
          in: query
          description: Number of epochs to return in the window. Allowed range is 1 to 100. Defaults to 100.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
            example: 50
      responses:
        '200':
          description: Balance history retrieved successfully. The `data` array contains one entry per validator per epoch within the requested window.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorBalanceHistoryResponse'
        '400':
          description: The request is invalid (for example, malformed identifiers or invalid query parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                invalidLatestEpoch:
                  summary: Invalid latest_epoch parameter
                  value:
                    status: 'ERROR: invalid latest epoch parameter'
                    data: null
                invalidOffset:
                  summary: Invalid offset parameter
                  value:
                    status: 'ERROR: invalid offset parameter'
                    data: null
                invalidLimit:
                  summary: Invalid limit parameter
                  value:
                    status: 'ERROR: invalid limit parameter'
                    data: null
                dbError:
                  summary: Database retrieval error
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/blsChange:
    get:
      tags:
        - Validators
      summary: BLS-to-execution credential changes
      description: |-
        Retrieve on-chain BLS-to-execution credential change messages (EIP-4881 style) for one or more validators. Each item includes the slot and epoch of inclusion, the canonical block root, the validator’s BLS pubkey and signature over the change message, the original 0x00 withdrawal credentials, and the resulting 0x01 credentials (derived from the execution address).
        Provide validator identifiers as a comma-separated list in the path. The service accepts validator indices and 0x-prefixed BLS pubkeys (up to the server-enforced limit; default 100). If a provided pubkey does not resolve to a known validator index, the request fails with HTTP 400.
      operationId: listValidatorBlsChanges
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Matching BLS credential changes were retrieved successfully. The `data` array contains one entry per observed change event.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorBlsChangeResponse'
        '400':
          description: The request is invalid (for example, malformed identifiers, too many identifiers, unresolved pubkeys, or database error).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
                empty:
                  summary: No or invalid indices provided
                  value:
                    status: 'ERROR: no or invalid validator indicies provided'
                    data: null
                dbError:
                  summary: Database retrieval error
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/deposits:
    get:
      tags:
        - Validators
      summary: Validator deposits (execution layer)
      description: |-
        Retrieve execution-layer deposit events associated with one or more validators. Provide a comma-separated list of validator indices or 0x-prefixed BLS pubkeys (up to the server-enforced limit; default 100).
        The response lists every DepositContract event observed for the specified validators, including deposit amount (gwei), validator public key, withdrawal credentials, and signature verification status. Use this endpoint to audit funding transactions for validators.
      operationId: listValidatorDeposits
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Matching deposits were retrieved successfully. The `data` array contains one entry per deposit event associated with any of the specified validators. If no deposits are found, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorDepositsResponse'
        '400':
          description: The request is invalid (for example, malformed identifier, too many identifiers, or unresolved pubkeys).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/execution/performance:
    get:
      tags:
        - Rewards
      summary: Execution layer rewards
      description: Retrieve execution-layer rewards (priority fees and MEV payments) for one or more validators over multiple lookback windows. Provide validator identifiers as a comma-separated list in the path parameter. The service accepts validator indices and 0x-prefixed BLS pubkeys (up to the server-enforced limit; default 100). Values are reported in wei.
      operationId: getValidatorExecutionPerformance
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Matching validators were retrieved successfully. The `data` array contains one item per validator with execution-layer reward totals for the last 1, 7, and 31 days, the last 365 days, and the cumulative sum since genesis when available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorExecutionPerformanceResponse'
        '400':
          description: The request is invalid (for example, malformed identifier, too many identifiers, or unresolved pubkeys).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/incomedetailhistory:
    get:
      tags:
        - Validators
      summary: Validator income detail history
      description: |-
        Retrieve a per-epoch income breakdown for one or more validators over a bounded epoch window. Provide validator identifiers as a comma-separated list in the path parameter (indices or 0x-prefixed BLS pubkeys, up to the server-enforced limit; default 100).
        The window ends at `latest_epoch` (defaults to the latest finalized epoch) and spans `limit` epochs backwards. You can shift the window back in time by setting `offset`, which reduces `latest_epoch` by the given number of epochs. The response includes consensus-layer rewards/penalties in gwei and execution tips in wei (`tx_fee_reward_wei`).
      operationId: listValidatorIncomeDetailHistory
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
        - name: latest_epoch
          in: query
          description: Most recent epoch to include (inclusive). Defaults to the latest finalized epoch. Must be less than or equal to the latest finalized epoch at request time.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 399359
        - name: offset
          in: query
          description: Number of epochs to skip backwards from `latest_epoch` before starting the window. Must be non-negative and not exceed `latest_epoch`.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - name: limit
          in: query
          description: Number of epochs to return in the window. Allowed range is 1 to 100. Defaults to 100.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
            example: 50
      responses:
        '200':
          description: Income details were retrieved successfully. The `data` array contains one entry per validator per epoch within the requested window. Items are sorted by epoch (descending) and then by validator index (ascending).
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorIncomeHistoryResponse'
        '400':
          description: The request is invalid (for example, malformed identifiers or invalid query parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
                noValidators:
                  summary: No validators provided
                  value:
                    status: 'ERROR: no validators provided'
                    data: null
                invalidLatestEpoch:
                  summary: Invalid latest_epoch parameter
                  value:
                    status: 'ERROR: invalid latest epoch parameter'
                    data: null
                invalidOffset:
                  summary: Invalid offset parameter
                  value:
                    status: 'ERROR: invalid offset parameter'
                    data: null
                invalidLimit:
                  summary: Invalid limit parameter
                  value:
                    status: 'ERROR: invalid limit parameter'
                    data: null
                dbError:
                  summary: Database retrieval error
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/performance:
    get:
      tags:
        - Rewards
      summary: Consensus-layer rewards
      description: Retrieve consensus-layer rewards for one or more validators over multiple lookback windows. Provide validator identifiers as a comma-separated list in the path parameter. The service accepts validator indices and 0x-prefixed BLS pubkeys (up to the server-enforced limit; default 100). Amounts are returned in gwei.
      operationId: getValidatorPerformance
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: Matching validators were retrieved successfully. The `data` array contains one item per validator with reward totals for the last 1, 7, 31, and 365 days, plus cumulative totals when available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorPerformanceResponse'
        '400':
          description: The request is invalid (for example, malformed identifier, too many identifiers, or unresolved pubkeys).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/proposals:
    get:
      tags:
        - Validators
      summary: Validator proposed blocks
      description: |-
        Retrieve beacon chain blocks proposed by one or more validators within a bounded epoch window. By default, the service returns proposals from the last 100 epochs ending at the latest processed epoch. You can page the window by setting the optional `epoch` query parameter to an upper bound (inclusive).
        The response includes per-block consensus metadata (roots, proposer, counts) and execution payload details when available. Execution fields are null for pre-Merge slots or blocks without an execution payload.
      operationId: listValidatorProposals
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default). Each identifier must be either a validator index (base-10 integer) or a 48-byte BLS public key as 0x-prefixed hex (96 hex characters after 0x) or without the 0x prefix.
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
        - name: epoch
          in: query
          description: Upper bound for the epoch window (inclusive). Results include proposals from epochs in the range `[epoch-100, epoch]`. Defaults to the latest processed epoch when omitted. Must be a non-negative integer.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 399359
      responses:
        '200':
          description: Matching proposals were retrieved successfully. The `data` array contains one item per block proposed by any of the specified validators within the requested epoch window.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorProposalsResponse'
        '400':
          description: The request is invalid (for example, malformed identifiers, too many identifiers, or invalid epoch).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                dbError:
                  summary: Database retrieval error
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validator/{indexOrPubkey}/withdrawals:
    get:
      tags:
        - Validators
      summary: Validator withdrawal history
      description: |-
        Retrieve withdrawal operations attributed to one or more validators within a bounded epoch window. By default, the service returns data for the last 100 epochs ending at the latest processed epoch. You can set the optional `epoch` query parameter to move the 100-epoch window back in time (the window becomes `[epoch-99, epoch]`, clamped at 0 when `epoch < 99`).
        Each item includes the epoch and slot of inclusion, the canonical block root, the global withdrawal index, the validator index, the recipient execution address, and the amount in gwei.
      operationId: listValidatorWithdrawals
      parameters:
        - name: indexOrPubkey
          in: path
          description: Comma-separated validator indices and/or public keys (maximum 100 items by default).
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
        - name: epoch
          in: query
          description: Upper bound (inclusive) for the 100-epoch window used to fetch withdrawals. Defaults to the latest processed epoch when omitted. Must be a non-negative integer.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            minimum: 0
            example: 399359
      responses:
        '200':
          description: Matching withdrawals were retrieved successfully. The `data` array contains one item per withdrawal observed for any of the specified validators within the requested epoch window. If no withdrawals are found, the array is empty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiValidatorWithdrawalResponse'
        '400':
          description: The request is invalid (for example, malformed identifiers, too many identifiers, or no valid indices).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                invalidParam:
                  summary: Invalid validator identifier
                  value:
                    status: 'ERROR: invalid validator-parameter'
                    data: null
                tooMany:
                  summary: Too many identifiers
                  value:
                    status: 'ERROR: only a maximum of 100 query parameters are allowed'
                    data: null
                unresolvedPubkeys:
                  summary: Pubkey did not resolve to an index
                  value:
                    status: 'ERROR: invalid validator argument, pubkey(s) did not resolve to a validator index'
                    data: null
                empty:
                  summary: No or invalid indices provided
                  value:
                    status: 'ERROR: no or invalid validator indicies provided'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
  /api/v1/validators/proposalLuck:
    get:
      tags:
        - Validators
      summary: Proposal luck
      description: Returns the proposal luck of a validator or a list of validators
      parameters:
        - name: validators
          in: query
          description: Provide a comma separated list of validator indices or pubkeys
          required: true
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/types.ApiProposalLuckResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
  /api/v1/validators/queue:
    get:
      tags:
        - Validators
      summary: Validator activation and exit queue
      description: Retrieve current queue metrics for validators awaiting activation (entering) and validators scheduled to exit (exiting). The response includes the number of validators in each queue, the total effective balance in gwei for each queue, and the total validator count known to the explorer. No parameters are required.
      operationId: getValidatorsQueue
      responses:
        '200':
          description: Queue metrics retrieved successfully. The `data` object contains counts and balances for entering and exiting validators.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/types.ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/types.ApiValidatorQueueResponse'
        '400':
          description: The request is invalid or results could not be retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                badRequest:
                  summary: Failed to retrieve results
                  value:
                    status: 'ERROR: could not retrieve db results'
                    data: null
        '500':
          description: An unexpected server error occurred while processing your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/types.ApiErrorResponse'
              examples:
                serverError:
                  summary: Internal error
                  value:
                    status: 'ERROR: internal server error'
                    data: null
components:
  securitySchemes:
    ApiKeyAuthQuery:
      type: apiKey
      in: query
      name: apikey
      description: 'Authorization header with value: `Bearer <token>`'
    ApiKeyAuthHeader:
      type: apiKey
      in: header
      name: apikey
      description: 'Authorization header with value: `Bearer <token>`'
  schemas:
    types.ApiErrorResponse:
      type: object
      description: Standard error envelope returned when a request fails.
      properties:
        status:
          type: string
          description: Human-readable error indicator and message. The value begins with "ERROR:" followed by details.
          example: 'ERROR: <Message>'
        data:
          type: string
          description: Optional additional context for the error. Null in most cases.
          nullable: true
          default: null
    types.ApiResponse:
      type: object
      description: Standard success envelope used by all API endpoints.
      properties:
        status:
          type: string
          description: HTTP-independent status of the API operation. For successful responses this is always "OK".
          enum:
            - OK
        data:
          description: Response payload specific to the endpoint.
          nullable: true
          x-omitempty: true
    types.EnsDomainResponse:
      type: object
      properties:
        address:
          type: string
          description: Ethereum address in hex format with 0x prefix
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
        domain:
          type: string
          description: ENS domain name; may be empty if reverse record is not set
          example: vitalik.eth
    types.APIEpochResponse:
      type: object
      description: Aggregate metrics, counts, and status for a single beacon chain epoch.
      properties:
        epoch:
          type: integer
          description: Epoch number you requested. An epoch groups a fixed number of consecutive slots (see chain config).
          example: 15000
        ts:
          type: string
          format: date-time
          description: The UTC timestamp at which this epoch started, in RFC 3339 format.
          example: '2022-09-29T04:00:23Z'
        finalized:
          type: boolean
          description: Indicates whether this epoch has been finalized by the consensus protocol. Finalized epochs will not be reverted under normal network operation.
          example: true
        validatorscount:
          type: integer
          description: Total number of active validators in this epoch.
          example: 436943
        averagevalidatorbalance:
          type: integer
          description: Average validator balance during this epoch, in gwei.
          example: 33827474537
        totalvalidatorbalance:
          type: integer
          description: Sum of balances of all active validators during this epoch, in gwei.
          example: 14780678206789428
        globalparticipationrate:
          type: number
          format: float
          description: Share of eligible stake that attested on time in this epoch, as a fraction between 0 and 1.
          example: 0.9885170459747314
        eligibleether:
          type: integer
          description: Total effective stake eligible to vote in this epoch, in gwei.
          example: 13982056000000000
        votedether:
          type: integer
          description: Total amount of stake that actually voted in this epoch, in gwei.
          example: 13821500000000000
        blockscount:
          type: integer
          description: Total number of slots in the epoch that contained a block (proposed, including orphaned).
          example: 32
        proposedblocks:
          type: integer
          description: Number of blocks proposed and included in the canonical chain during this epoch.
          example: 31
        missedblocks:
          type: integer
          description: Number of scheduled proposals that were missed (no block proposed) in this epoch.
          example: 1
        orphanedblocks:
          type: integer
          description: Number of blocks proposed but not part of the canonical chain (reorged/orphaned) in this epoch.
          example: 0
        scheduledblocks:
          type: integer
          description: Number of scheduled block proposals in this epoch. Typically equals the number of slots in an epoch.
          example: 0
        attestationscount:
          type: integer
          description: Number of attestation operations included across all blocks in this epoch.
          example: 3458
        attesterslashingscount:
          type: integer
          description: Number of attester slashing operations included in this epoch.
          example: 0
        proposerslashingscount:
          type: integer
          description: Number of proposer slashing operations included in this epoch.
          example: 1
        depositscount:
          type: integer
          description: Number of validator deposit operations processed in this epoch.
          example: 12
        withdrawalcount:
          type: integer
          description: Number of withdrawal operations processed in this epoch.
          example: 16
        voluntaryexitscount:
          type: integer
          description: Number of voluntary exit operations processed in this epoch.
          example: 2
        rewards_exported:
          type: boolean
          description: Indicates whether per-validator reward details for this epoch have been exported and are available for querying.
          example: true
    primitives.NullableInteger:
      nullable: true
      type: integer
    primitives.NullableString:
      nullable: true
      type: string
    types.APISlotResponse:
      type: object
      description: Detailed representation of a beacon slot and its associated block and execution payload fields.
      properties:
        attestationscount:
          type: integer
          description: Number of attestations included in this block
          example: 8
        attesterslashingscount:
          type: integer
          description: Number of attester slashing operations included in this block
          example: 0
        blockroot:
          type: string
          description: Hash tree root of the beacon block header (0x-prefixed hex)
          example: '0xeb64c069b979ef8eed41993ec0563f1ed0e935b95fcbe9ed26de4c904c94aeb3'
        depositscount:
          type: integer
          description: Number of deposit operations included in this block
          example: 10
        epoch:
          type: integer
          description: Beacon chain epoch that contains this slot
          example: 398479
        eth1data_blockhash:
          type: string
          description: Execution-layer block hash voted in the Eth1Data of this block (0x-prefixed hex)
          example: '0xeb64c069b979ef8eed41993ec0563f1ed0e935b95fcbe9ed26de4c904c94aeb3'
        eth1data_depositcount:
          type: integer
          description: Cumulative number of deposits as reported in Eth1Data
          example: 2045305
        eth1data_depositroot:
          type: string
          description: Deposit tree root as reported in Eth1Data (0x-prefixed hex)
          example: '0x2ebc563cabdbbacbc56f0de1d2d1c2d5315a4b071fcd8566aabbf0a45161c64e'
        exec_base_fee_per_gas:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: EIP-1559 base fee per gas for the embedded execution payload in wei per gas; null if no payload
          example: 680634007
        exec_block_hash:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Hash of the execution-layer block included as the payload; null if no payload
          example: '0x1f97b8eb2444d4fcdfd8dade8a9f8630860acca3ce694f800881fab642eace6c'
        exec_block_number:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Number of the execution-layer block included as the payload; null if no payload
          example: 23525866
        exec_extra_data:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Extra data field from the execution block header (0x-prefixed hex); null if no payload
          example: '0x546974616e2028746974616e6275696c6465722e78797a29'
        exec_fee_recipient:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Fee recipient (coinbase) address of the execution payload; null if no payload
          example: '0x4838b106fce9647bdf1e7877bf73ce8b0bad5f97'
        exec_gas_limit:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Gas limit of the execution payload block; null if no payload
          example: 23525866
        exec_gas_used:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Gas used by the execution payload block; null if no payload
          example: 23525866
        exec_logs_bloom:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Logs bloom filter from the execution block header; null if no payload
          example: '0x54a8a16a45119f9fd52558acccb035c9154b9b509664b87dcfdd129d7499b0a1249dd137bfed0146da934b6b47ea75dc77d1c67bac137b0914da37d4686c97ceba768dfa4ed0fcb8ed34d1ab91e99aa164663e32e7fe79386b627cba1e9cde870b71a9eabb4'
        exec_parent_hash:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Parent hash of the execution payload block; null if no payload
          example: '0x3f9eeb7bbcfa68b70ed5b15fe0476c0cd594a025032ad6522c2f087922393b3e'
        exec_random:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: prevRandao (mixHash) value in the execution block header; null if no payload
          example: '0x2a9ef3da82054fe160d54973c8f7ce9482ff1ef0c09262d9a86e3641d1d52131'
        exec_receipts_root:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Receipts root of the execution payload block; null if no payload
          example: '0xbc1799c451b10b1689e540333ca2f9dac9a86a9654075a0d141385d6bbb8ceed'
        exec_state_root:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: State root of the execution payload block; null if no payload
          example: '0x8e251e0dd4aaf308b5c899c8f659e6de984aad11f4df85468d6cbf9edfa7ce48'
        exec_timestamp:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Timestamp of the execution payload block (Unix seconds); null if no payload
          example: 1759839959
        exec_transactions_count:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Number of transactions included in the execution payload; null if no payload
          example: 3
        graffiti:
          type: string
          description: 32-byte graffiti field from the beacon block body as 0x-prefixed hex
          example: '0x544b373536390000000000000000000000000000000000000000000000000000'
        graffiti_text:
          type: string
          description: Graffiti rendered as UTF-8 text when printable; may be empty if not decodable
          example: TK7569
        parentroot:
          type: string
          description: Root of the parent beacon block header (0x-prefixed hex)
          example: '0x36ed53a94a32b494b3a26fbbb56c2ce2af9cf657a7c3975da96faf0fba66c2c2'
        proposer:
          type: integer
          description: Index of the validator that proposed this block
          example: 1098947
        proposerslashingscount:
          type: integer
          description: Number of proposer slashing operations included in this block
          example: 0
        randaoreveal:
          type: string
          description: Proposer's RANDAO reveal (BLS signature) contributing to beacon chain randomness (0x-prefixed hex)
          example: '0x8add195bc76c9cd723730cd4dae3098663f3e0257a543ed8ca4273471e1983c8c937ee37b95c7c30c5e91bf6a19b81a60f11bbb41014e45674e57566dba923b6c26b17911f811af04b28dce9020bb54b6f8de38bb63b8a0f9c4902357700e85b'
        signature:
          type: string
          description: BLS signature of the beacon block header (0x-prefixed hex)
          example: '0xab6b6d826c14b6141e3406c5227ead15b133993195e96edc05fdeba998d0e0fd96e4ec5f47f6c9eec1558a59042c03d1016e679faf7300bc14737c7178c5cc01b2ea5f345e13cc2e29eeeefaf18cdcde6c0a99d80923ecf8ff8619a4d2511f6e'
        slot:
          type: integer
          description: Beacon slot number of this block
          example: 12751457
        stateroot:
          type: string
          description: Root of the beacon state in the block header (0x-prefixed hex)
          example: '0xb4373fdde2b7e43692937e6982a853b747ae3ec2ec4721bee538f4770229415d'
        status:
          type: string
          description: 'Block status code: ''0'' scheduled, ''1'' proposed (canonical), ''2'' missed, ''3'' orphaned'
          example: '1'
        syncaggregate_bits:
          type: string
          description: 512-bit bitfield (0x-prefixed hex) indicating which sync committee members participated; one bit per member.
          example: '0xaf6d5ffa3fddbdd7a82286f7dd17b87bfdbbbf17733beda97eef74bfffdeff7fdf7dd1effdf0d3ffbf23feb97bf463febfb0edcceef65fea77fdbdcfb50edbf1'
        syncaggregate_participation:
          type: number
          description: Participation ratio of the sync committee for this block (0..1)
          example: 0.990234375
        syncaggregate_signature:
          type: string
          description: Aggregated BLS signature of the sync committee for this block (0x-prefixed hex)
          example: '0xaa7c2f8db87e82ed4e45e0c328918f0f1ca88d6bdc1e20933816b22e3965099d2fcaa6960e76959921c0d6b5b7a73d1203e3bceaf2a23436f9eedc072d924b4270f21c57356ca99813e63b44dd4f363abc49466114b05736ef925d9330f93dd5'
        voluntaryexitscount:
          type: integer
          description: Number of voluntary exit operations included in this block
          example: 0
        withdrawalcount:
          type: integer
          description: Number of withdrawals included in the execution payload of this block
          example: 16
    primitives.EthTxHash:
      type: string
      pattern: ^0x[a-fA-F0-9]{64}$
      example: '0x3629639fe74ef981ff72ba2678130c700b779964e6c22fe42201445084e9d343'
    types.APIEth1TxDepositResponse:
      type: object
      description: Details of a single validator deposit decoded from an execution-layer transaction.
      properties:
        amount:
          type: integer
          description: Deposited amount in gwei (1 gwei = 1e9 wei).
          example: 32000000000
        block_number:
          type: integer
          description: Execution-layer block number that included the transaction.
          example: 23537869
        block_ts:
          type: integer
          description: Block timestamp as Unix time in seconds (UTC).
          example: 1759985003
        from_address:
          type: string
          description: Sender address funding the deposit (0x-prefixed, 20-byte hex Ethereum address).
          example: '0x26e8ce0d6c1424566ff8d584d1409b9fe651f27d'
        merkletree_index:
          type: string
          description: Merkle tree index of the deposit within the Ethereum deposit contract; 0x-prefixed hex-encoded uint64 as emitted in the DepositEvent log.
          example: '0xfab3220000000000'
        publickey:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          example: '0x8bcf64d7f36af7e4c642ff02bc8ecdef72593762538a86f6eeda6375d35302d4d307f9d2a11f2ff6c5483a5d1c8c81a1'
        removed:
          type: boolean
          description: True if the associated log was removed due to an execution chain reorganization.
          example: false
        signature:
          type: string
          description: BLS signature over the deposit message (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0xb70208d62803c7695d8eb47fff79ac0273711191d0b1fc3b8bcaca649affba83b77cc8dad73cf5bfe2771918a1f767400bb0603e690294c9b8ffb73072f734cc8131e59b4ce4240aa8377dcd4388d1beaaea495b4b603432e83b46126d7575cb'
        tx_hash:
          type: string
          description: Hash of the execution transaction that carried the deposit (0x-prefixed 32-byte hex).
          example: '0x5ddaf424a46ab378967ce45c72b8532386cbd558ddb3b5ddb8a828000ad57895'
        tx_index:
          type: integer
          description: Index of the transaction within its block (0-based).
          example: 90
        tx_input:
          type: string
          description: Raw calldata of the transaction (0x-prefixed hex), containing the deposit payload for the DepositContract.
          example: '0x00'
        valid_signature:
          type: boolean
          description: Indicates whether the deposit signature is valid for the provided public key and deposit message.
          example: true
        withdrawal_credentials:
          type: string
          description: 32-byte withdrawal credentials (0x-prefixed hex). Usually starts with 0x01 for ETH1 address withdrawals or 0x00 for BLS withdrawals.
          example: '0x01000000000000000000000026e8ce0d6c1424566ff8d584d1409b9fe651f27d'
    types.APIEthStoreResponse:
      type: object
      description: Daily ETH.Store® aggregates for a single beaconchain-day.
      properties:
        day:
          type: integer
          description: Beaconchain-day index since genesis (>= 0). Typically one record per day.
          example: 435
        day_start:
          type: string
          format: date-time
          description: Start timestamp (UTC) of the 24-hour period in RFC 3339 format.
          example: '2022-02-09T12:00:23Z'
        day_end:
          type: string
          format: date-time
          description: End timestamp (UTC) of the 24-hour period in RFC 3339 format.
          example: '2022-02-10T12:00:23Z'
        apr:
          type: number
          description: Total annualized percentage rate for the day as a fraction (0..1), combining consensus-layer rewards and execution-layer fees.
          example: 0.0527609790864113
        avgapr7d:
          type: number
          description: 7-day trailing average of total APR (0..1), centered on or including this day.
          example: 0.052764308760676414
        avgapr31d:
          type: number
          description: 31-day trailing average of total APR (0..1), centered on or including this day.
          example: 0.053351525019046164
        cl_apr:
          type: number
          description: Consensus-layer APR component only (0..1) for the day (attestations, proposals, sync committee, etc.).
          example: 0.0527609790864113
        cl_avgapr7d:
          type: number
          description: 7-day trailing average of consensus-layer APR (0..1).
          example: 0.052764308760676414
        cl_avgapr31d:
          type: number
          description: 31-day trailing average of consensus-layer APR (0..1).
          example: 0.053351525019046164
        el_apr:
          type: number
          description: Execution-layer APR component only (0..1) for the day (e.g., priority fees, MEV). 0 for pre-Merge periods.
          example: 0.0063633204373217
        el_avgapr7d:
          type: number
          description: 7-day trailing average of execution-layer APR (0..1).
          example: 0.005195252974383372
        el_avgapr31d:
          type: number
          description: 31-day trailing average of execution-layer APR (0..1).
          example: 0.005679846878640752
        consensus_rewards_sum_wei:
          type: number
          description: Total consensus-layer rewards accrued during the day across all validators, in wei.
          example: 1.349850765807e+21
        avgconsensus_rewards7d_wei:
          type: number
          description: 7-day trailing average of the daily consensus rewards sum, in wei.
          example: 1.345081426021e+21
        avgconsensus_rewards31d_wei:
          type: number
          description: 31-day trailing average of the daily consensus rewards sum, in wei.
          example: 1.3378170064684515e+21
        tx_fees_sum_wei:
          type: number
          description: Total execution-layer transaction fees (including priority fees and MEV tips) accrued during the day across all validators, in wei. 0 for pre-Merge periods.
          example: 503073827859422400000
        avgtx_fees7d_wei:
          type: number
          nullable: true
          description: 7-day trailing average of the daily transaction fees sum, in wei; null when not applicable (e.g., pre-Merge).
          example: null
        avgtx_fees31d_wei:
          type: number
          nullable: true
          description: 31-day trailing average of the daily transaction fees sum, in wei; null when not applicable (e.g., pre-Merge).
          example: null
        deposits_sum_wei:
          type: number
          description: Total amount of ETH deposited into the validator deposit contract during the day, in wei.
          example: 0
        effective_balances_sum_wei:
          type: number
          description: Sum of effective balances across all active validators at the end of the day, in wei.
          example: 9.338256e+24
        start_balances_sum_wei:
          type: number
          description: Sum of actual validator balances at the start of the day, in wei.
          example: 9.783046761967892e+24
        end_balances_sum_wei:
          type: number
          description: Sum of actual validator balances at the end of the day, in wei.
          example: 9.7843966127337e+24
        total_rewards_wei:
          type: number
          description: Total rewards earned during the day (consensus + execution), in wei.
          example: 1.349850765807e+21
    primitives.EthAddress:
      type: string
      pattern: ^0x[a-fA-F0-9]{40}$
      example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    types.ApiEth1AddressERC20TokenResponse:
      type: object
      description: ERC-20 token balance for the specified address.
      properties:
        address:
          type: string
          description: ERC-20 token contract address (0x-prefixed, 20-byte hex).
          example: '0xdac17f958d2ee523a2206206994597c13d831ec7'
        balance:
          type: string
          description: Token balance as a decimal string in token units; non-negative, no scientific notation. Precision follows the token's decimals.
          example: '122100'
        symbol:
          type: string
          description: Token symbol as defined by the ERC-20 contract.
          example: TOKEN1
    types.ApiEth1AddressResponse:
      type: object
      description: Asset balances for a single execution-layer address, including native ETH and up to 200 ERC-20 token balances.
      properties:
        address:
          type: string
          description: Ethereum account address (0x-prefixed, 20-byte hex; 40 hex characters after 0x).
          example: '0x388c818ca8b9251b393131c08a736a67ccb19297'
        ether:
          type: string
          description: Native ETH balance as a decimal string in ETH units with up to 18 decimal places (non-negative, no scientific notation).
          example: '2.472194030644794345'
        tokens:
          type: array
          description: List of ERC-20 token balances associated with the address. The list is limited to the first 200 tokens; use the dedicated tokens endpoint for larger result sets.
          items:
            $ref: '#/components/schemas/types.ApiEth1AddressERC20TokenResponse'
    types.ExecBlockProposer:
      type: object
      description: Consensus-layer proposer information for the execution block.
      properties:
        executionBlockNumber:
          type: integer
          description: Execution block number associated with this proposer record.
          example: 23540530
        proposerIndex:
          type: integer
          description: Index of the beacon chain validator that proposed the corresponding block.
          example: 1843949
        slot:
          type: integer
          description: Beacon slot at which the block was proposed.
          example: 12766094
        epoch:
          type: integer
          description: Beacon epoch containing the proposer slot.
          example: 398940
        finalized:
          type: boolean
          description: Indicates whether the epoch containing this block has been finalized on the consensus layer.
          example: false
    types.RelayDataApiResponse:
      type: object
      description: MEV relay metadata associated with an execution block built via a relay.
      properties:
        tag:
          type: string
          description: Identifier of the relay that delivered the block.
          example: ultrasound-relay
        builderPubkey:
          type: string
          description: 0x-prefixed hex-encoded public key of the block builder as reported by the relay.
          example: '0xa3523967a7955c0244910f23b7b1fc59636f03bec437286b622815408d51389f7f6cd54617733b93926b7860e1f6afb0'
        producerFeeRecipient:
          type: string
          description: Execution address designated to receive the builder’s fee (0x-prefixed, 20-byte hex address).
          example: '0xa27cef8af2b6575903b676e5644657fae96f491f'
    types.ExecutionBlockApiResponse:
      type: object
      description: Overview of an execution-layer block, including rewards, gas, parent links, and optional consensus/relay metadata.
      properties:
        blockHash:
          type: string
          description: 0x-prefixed 32-byte Keccak hash of the execution block.
          example: '0x160a5ea46dcbaca7fce7bbeef3a3448197c021af6c3e258150ab017629794678'
        blockNumber:
          type: integer
          description: Execution block number (>= 0).
          example: 23540530
        timestamp:
          type: integer
          description: Block timestamp as Unix time in seconds (UTC).
          example: 1760017151
        blockReward:
          type: integer
          description: Total block reward attributed to the block in wei (sum of priority fees and any MEV reward considered in this API).
          example: 15027635123493132
        blockMevReward:
          type: integer
          description: MEV payment amount attributed to this block in wei; 0 when no relay/bribe data is recorded.
          example: 11268157891595494
        producerReward:
          type: integer
          description: Reward paid to the fee recipient (coinbase) in wei. Equals blockMevReward when present; otherwise equals blockReward.
          example: 11268157891595494
        feeRecipient:
          type: string
          description: Fee recipient (coinbase) address that received the block’s reward (0x-prefixed, 20-byte hex address).
          example: '0x4838b106fce9647bdf1e7877bf73ce8b0bad5f97'
        gasLimit:
          type: integer
          description: Gas limit set for the block.
          example: 44999957
        gasUsed:
          type: integer
          description: Total gas used by all transactions in the block.
          example: 26436568
        baseFee:
          type: integer
          description: EIP-1559 base fee per gas in wei. 0 for pre-London blocks.
          example: 473717334
        txCount:
          type: integer
          description: Number of transactions included in the block.
          example: 235
        internalTxCount:
          type: integer
          description: Number of internal transactions (traces) attributed to the block.
          example: 725
        uncleCount:
          type: integer
          description: Number of ommers (uncles) referenced by the block. 0 for post-Merge PoS blocks.
          example: 0
        parentHash:
          type: string
          description: 0x-prefixed 32-byte Keccak hash of the parent execution block.
          example: '0x57ddc629098d3a47ddf8c2a554c75c4d9ab0a8bd740c1e86b0f1da324a425953'
        uncleHash:
          type: string
          description: 0x-prefixed Keccak hash of the block’s ommers list (ommersHash).
          example: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        difficulty:
          type: integer
          description: Difficulty field from the execution header. 0 for PoS blocks, non-zero for PoW blocks.
          example: 0
        posConsensus:
          $ref: '#/components/schemas/types.ExecBlockProposer'
          description: Consensus-layer proposer linkage for this execution block.
          nullable: true
        relay:
          $ref: '#/components/schemas/types.RelayDataApiResponse'
          description: MEV relay metadata when the block was delivered via a relay.
          nullable: true
        consensusAlgorithm:
          type: string
          description: 'Consensus algorithm in effect for this block: "pos" for proof-of-stake (post-Merge) or "pow" for proof-of-work (pre-Merge).'
          enum:
            - pos
            - pow
          example: pos
    types.GasNowPageData:
      type: object
      description: Fee recommendations and ETH price snapshot used by the GasNow view and API.
      properties:
        code:
          type: integer
          description: Application-level status code. 200 indicates success.
          enum:
            - 200
        data:
          type: object
          description: Container for gas price tiers and market data at the time of computation.
          properties:
            rapid:
              type: integer
              description: Recommended max fee per gas for rapid inclusion (≈15s), in wei per gas.
              example: 141086566
            fast:
              type: integer
              description: Recommended max fee per gas for fast inclusion (≈1m), in wei per gas.
              example: 141086542
            standard:
              type: integer
              description: Recommended max fee per gas for standard inclusion (≈3m), in wei per gas.
              example: 141086518
            slow:
              type: integer
              description: Recommended max fee per gas for slow inclusion (>10m), in wei per gas.
              example: 141086044
            timestamp:
              type: integer
              description: Unix timestamp in milliseconds (UTC) when the recommendation set was computed.
              example: 1760076662742
            price:
              type: number
              format: float
              nullable: true
              description: Price of ETH in the fiat currency identified by `currency` at `timestamp`.
              example: 4366.60356702
            priceUSD:
              type: number
              format: float
              description: Price of ETH in USD at `timestamp`.
              example: 4366.60356702
    types.GraffitiwallResponse:
      type: object
      description: One painted pixel on the graffiti wall, including coordinates, color, and provenance.
      properties:
        x:
          type: integer
          description: X coordinate of the pixel (>= 0). The origin (0,0) is the top-left corner of the canvas.
          minimum: 0
          example: 203
        'y':
          type: integer
          description: Y coordinate of the pixel (>= 0). The origin (0,0) is the top-left corner of the canvas.
          minimum: 0
          example: 420
        color:
          type: string
          description: RGB color encoded as a 6-character uppercase hexadecimal string without a leading '#'.
          pattern: ^[A-F0-9]{6}$
          example: C3423F
        slot:
          type: integer
          description: Beacon chain slot number at which this pixel was painted.
          minimum: 0
          example: 12764598
        validator:
          type: integer
          description: Index of the validator who painted the pixel (the block proposer for the corresponding slot).
          minimum: 0
          example: 1843949
    types.RatesPrice:
      type: object
      description: Compact price representation used in UI tickers for a specific fiat currency.
      properties:
        symbol:
          type: string
          description: Fiat currency symbol corresponding to the price (e.g., $, €).
          example: $
        roundPrice:
          type: integer
          description: Price rounded to the nearest integer amount in the fiat currency.
          example: 4366
        truncPrice:
          type: string
          description: Abbreviated string representation (e.g., 4.3k) for compact displays.
          example: 4.3k
    types.Rates:
      type: object
      description: Currency and price metadata used by the UI to display values and perform conversions.
      properties:
        tickerCurrency:
          type: string
          description: Fiat currency code used for the price ticker (ISO 4217 code, e.g., USD, EUR).
          example: USD
        tickerCurrencySymbol:
          type: string
          description: Symbol of the ticker fiat currency.
          example: $
        selectedCurrency:
          type: string
          description: Primary asset selected for display in the UI (usually ETH).
          example: ETH
        selectedCurrencySymbol:
          type: string
          description: Symbol used for the selected currency.
          example: ETH
        mainCurrency:
          type: string
          description: Primary asset used for conversions and price displays (same as selectedCurrency in most deployments).
          example: ETH
        mainCurrencySymbol:
          type: string
          description: Symbol used for the primary asset.
          example: ETH
        mainCurrencyPrice:
          type: number
          description: Conversion rate of the primary asset to itself. This is 1 when mainCurrency equals the base asset (ETH).
          example: 1
        mainCurrencyPriceFormatted:
          type: string
          description: Formatted string representation of mainCurrencyPrice for UI display (may include separators or HTML markup).
          example: '1'
        mainCurrencyKFormatted:
          type: string
          description: Abbreviated (thousands) representation of mainCurrencyPrice for compact displays.
          example: '1'
        mainCurrencyTickerPrice:
          type: number
          description: Spot price of the primary asset in the ticker fiat currency.
          example: 4366.60356702
        mainCurrencyTickerPriceFormatted:
          type: string
          description: Formatted string representation of mainCurrencyTickerPrice for UI display (may include thousands separators or HTML markup).
          example: 4<span class="thousands-separator"></span>366
        mainCurrencyTickerPriceKFormatted:
          type: string
          description: Abbreviated (thousands) representation of mainCurrencyTickerPrice for compact displays.
          example: 4<span class="thousands-separator"></span>366
        elCurrency:
          type: string
          description: Asset used when displaying values originating from the execution layer (typically ETH).
          example: ETH
        elCurrencySymbol:
          type: string
          description: Symbol used for the execution-layer asset.
          example: ETH
        elCurrencyPrice:
          type: number
          description: Conversion rate of the execution-layer asset to itself. This is 1 when elCurrency equals ETH.
          example: 1
        elCurrencyPriceFormatted:
          type: string
          description: Formatted string representation of elCurrencyPrice.
          example: '1'
        elCurrencyKFormatted:
          type: string
          description: Abbreviated (thousands) representation of elCurrencyPrice.
          example: '1'
        clCurrency:
          type: string
          description: Asset used when displaying values originating from the consensus layer (typically ETH).
          example: ETH
        clCurrencySymbol:
          type: string
          description: Symbol used for the consensus-layer asset.
          example: ETH
        clCurrencyPrice:
          type: number
          description: Conversion rate of the consensus-layer asset to itself. This is 1 when clCurrency equals ETH.
          example: 1
        clCurrencyPriceFormatted:
          type: string
          description: Formatted string representation of clCurrencyPrice.
          example: '1'
        clCurrencyKFormatted:
          type: string
          description: Abbreviated (thousands) representation of clCurrencyPrice.
          example: '1'
        mainCurrencyTickerPrices:
          type: object
          description: Map of fiat currency codes to compact price representations for the primary asset.
          additionalProperties:
            $ref: '#/components/schemas/types.RatesPrice'
    types.LatestState:
      type: object
      description: Snapshot of the latest beacon chain state along with pricing metadata used by the UI.
      properties:
        lastProposedSlot:
          type: integer
          description: Highest slot number for which a block proposal has been observed and indexed.
          minimum: 0
          example: 12771116
        currentSlot:
          type: integer
          description: Latest processed slot number based on chain time as observed by the backend.
          minimum: 0
          example: 12771115
        currentEpoch:
          type: integer
          description: Epoch number corresponding to the current slot.
          minimum: 0
          example: 399097
        currentFinalizedEpoch:
          type: integer
          description: Most recent epoch that has been finalized by the consensus protocol.
          minimum: 0
          example: 399094
        finalityDelay:
          type: integer
          description: Number of epochs between the current epoch and the latest finalized epoch (currentEpoch - currentFinalizedEpoch). Always non-negative.
          minimum: 0
          example: 3
        syncing:
          type: boolean
          description: Indicates whether the backend is still catching up to the network head. When true, some values may lag behind real time.
          example: false
        rates:
          $ref: '#/components/schemas/types.Rates'
          description: Currency settings and price data used for value conversions in the UI.
    types.APIRocketpoolStatsResponse:
      type: object
      description: Network-level Rocket Pool statistics as observed by the explorer backend.
      properties:
        claim_interval_time:
          type: string
          description: Duration of the current Rocket Pool rewards claim interval, formatted as HH:MM:SS. Represents the length of the interval during which rewards accrue before the next checkpoint.
          example: '672:00:00'
        claim_interval_time_start:
          type: integer
          format: int64
          description: Unix timestamp in seconds (UTC) when the current rewards claim interval started.
          example: 1758778539
        current_node_demand:
          type: number
          description: Signed metric indicating current node demand in the Rocket Pool network. Positive values indicate demand for additional node capacity; negative values indicate surplus capacity. This value is provided by Rocket Pool contracts and is unitless.
          example: -3.983366338292163e+21
        current_node_fee:
          type: number
          description: Current node commission fee as a fractional rate. For example, 0.05 equals a 5% node fee.
          example: 0.05
        effective_rpl_staked:
          type: number
          description: Total effective RPL stake across node operators, expressed in RPL token units with 18 decimals.
          example: 9.325076691110913e+24
        minipool_count:
          type: integer
          description: Total number of Rocket Pool minipools tracked by the explorer.
          example: 42248
        node_count:
          type: integer
          description: Total number of Rocket Pool node operators tracked by the explorer.
          example: 4024
        node_operator_rewards:
          type: number
          description: Amount of RPL allocated to node operators for the current claim interval, expressed in RPL token units with 18 decimals.
          example: 5.719242908397718e+22
        odao_member_count:
          type: integer
          description: Number of Rocket Pool Oracle DAO (oDAO) members.
          example: 13
        reth_apr:
          type: number
          description: Annualized percentage rate for rETH based on the change in the rETH exchange rate over the last 168 hours (7 days). Expressed as a fraction; for example, 0.0384 equals 3.84% APR.
          example: 0.0384304813
        reth_exchange_rate:
          type: number
          description: Current rETH-to-ETH exchange rate. A value greater than 1.0 indicates that 1 rETH can be redeemed for more than 1 ETH.
          example: 1.1476800133
        reth_supply:
          type: number
          description: Total rETH token supply in token units with 18 decimals.
          example: 3.9133933672076725e+23
        rpl_price:
          type: integer
          format: int64
          description: Current RPL price quoted in ETH, represented as a fixed-point integer with 18 decimals (wei per RPL).
          example: 1114711058888101
        total_eth_balance:
          type: number
          description: Total ETH held by the Rocket Pool protocol (including staking and buffer), denominated in wei (1e18 wei = 1 ETH). Large values may not fit into 53-bit JavaScript integers.
          example: 4.4913233519356025e+23
        total_eth_staking:
          type: number
          description: Total ETH currently staked through Rocket Pool validators, denominated in wei (1e18 wei = 1 ETH). Large values may not fit into 53-bit JavaScript integers.
          example: 4.471319830044493e+23
    primitives.indicesOrPubkeys:
      type: string
      description: |
        Comma-separated list (no spaces) of validator identifiers. Each identifier must be either:
        - A validator index as a base-10 integer (for example, 652648)
        - A BLS public key as a 96-hex-character string with or without the 0x prefix (case-insensitive)

        Resolution and limits:
        - The server resolves public keys to validator indices before querying data.
        - The total number of identifiers must not exceed the server-enforced limit (default 100).
        - Identifiers that cannot be parsed or resolved result in HTTP 400.
      example: 1,2,3
    types.ApiRocketpoolValidatorResponse:
      properties:
        claimed_smoothing_pool:
          type: integer
          description: Total ETH from the smoothing pool that the node has already claimed across all intervals, in wei.
          example: 2558507058679352300
        effective_rpl_stake:
          type: number
          description: Effective RPL stake for the node after applying protocol caps, expressed in RPL tokens.
          example: 0
        index:
          type: integer
          description: Consensus validator index that this entry refers to.
          example: 652648
        is_vacant:
          type: boolean
          description: Indicates that the minipool currently has no active validator assigned (vacant).
          example: false
        minipool_address:
          type: string
          description: Ethereum address of the Rocket Pool minipool contract associated with the validator.
          example: '0xc20eb9eca73be78a523aad5a4d9b70c797ff58a1'
        minipool_deposit_type:
          type: string
          description: Minipool deposit configuration. One of "Full", "Half", or "Variable".
          example: Variable
        minipool_node_fee:
          type: number
          description: Node commission rate for this minipool as a decimal fraction in the range [0, 1]. For example, 0.14 means 14%.
          example: 0.14
        minipool_status:
          type: string
          description: Current on-chain minipool status. Possible values include "Initialized", "Prelaunch", "Staking", "Withdrawable", and "Dissolved".
          example: Staking
        minipool_status_time:
          type: integer
          description: Unix timestamp (seconds) when the minipool entered the current status.
          example: 1684570331
        node_address:
          type: string
          description: Ethereum address of the Rocket Pool node operator that owns the minipool.
          example: '0xfff1f570f09c073b6621c032b6072847fe9d6fac'
        node_deposit_balance:
          type: integer
          description: Amount of ETH contributed by the node to the minipool deposit, in wei.
          example: 8000000000000000000
        node_deposit_credit:
          type: number
          description: Node’s available ETH deposit credit used to form or expand minipools, in wei.
          example: 0
        node_max_rpl_stake:
          type: number
          description: Maximum RPL stake permitted for the node under protocol rules, in RPL tokens.
          example: 0
        node_min_rpl_stake:
          type: number
          description: Minimum required RPL stake for the node to remain compliant, in RPL tokens.
          example: 0
        node_refund_balance:
          type: integer
          description: ETH refundable to the node from the minipool, in wei.
          example: 0
        node_rpl_stake:
          type: number
          description: Current RPL stake held by the node, in RPL tokens.
          example: 0
        node_timezone_location:
          type: string
          description: IANA time zone identifier configured for the node (for example, "Etc/UTC").
          example: Etc/UTC
        penalty_count:
          type: integer
          description: Number of penalties that have been recorded for this minipool.
          example: 0
        rpl_cumulative_rewards:
          type: integer
          description: Total RPL token rewards the node has already claimed across all intervals, in base units (10^18).
          example: 487854676781293300000
        smoothing_pool_opted_in:
          type: boolean
          description: Indicates whether the node is registered to receive smoothing pool distributions.
          example: false
        unclaimed_rpl_rewards:
          type: integer
          description: RPL token rewards accrued by the node that have not yet been claimed, in base units (10^18).
          example: 0
        unclaimed_smoothing_pool:
          type: integer
          description: ETH from the smoothing pool that is currently unclaimed by the node, in wei.
          example: 0
        user_deposit_balance:
          type: integer
          description: Amount of ETH contributed by rETH users to the minipool deposit, in wei.
          example: 24000000000000000000
        version:
          type: integer
          description: Minipool contract version.
          example: 3
    types.APIAttestationResponse:
      type: object
      description: Aggregated attestation included in a beacon block, with committee and checkpoint metadata.
      properties:
        aggregationbits:
          type: string
          description: Bitfield indicating which committee members participated in this attestation. Encoded as 0x-prefixed hexadecimal representing the SSZ bitlist; one bit per member (1 = participated).
          example: '0xff'
        beaconblockroot:
          type: string
          description: Root of the beacon block being voted on (head block) as referenced by the attestation data (0x-prefixed, 32-byte hex).
          example: '0x94677296757527ccfd5849a6c07d179a9ed783a771c7bb305b9b9350fffd97d0'
        block_index:
          type: integer
          description: Zero-based index of this attestation within the including block’s attestation list.
          example: 1
        block_root:
          type: string
          description: Root of the beacon block that included this attestation (0x-prefixed, 32-byte hex).
          example: '0xfa4349ae9843b52cd7e9ff42e43deaf3a9220c0ae3f3dd64da9c2c97544dfd4c'
        block_slot:
          type: integer
          description: Slot number of the block that included this attestation.
          example: 12751688
        committeeindex:
          type: integer
          description: Committee index within the epoch for the attestation’s slot (>= 0).
          minimum: 0
          example: 1
        signature:
          type: string
          description: Aggregated BLS signature over the attestation data (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0xaa'
        slot:
          type: integer
          description: Slot that this attestation attests to (attestation data slot).
          example: 12751687
        source_epoch:
          type: integer
          description: Source checkpoint epoch of the attestation (>= 0).
          minimum: 0
          example: 398489
        source_root:
          type: string
          description: Root of the source checkpoint (0x-prefixed, 32-byte hex).
          example: '0x1c2bfaa61c0f5f7a8f8e3a16f6d0f1d4b3f2a1c0b9a8d7c6e5f4d3c2b1a0f9e8'
        target_epoch:
          type: integer
          description: Target checkpoint epoch of the attestation (>= 0).
          minimum: 0
          example: 398490
        target_root:
          type: string
          description: Root of the target checkpoint (0x-prefixed, 32-byte hex).
          example: '0x88f88f748227a397a09a7b8cbe13dab1d0411950993e618fc7a6d76d1d7d0c76'
        validators:
          type: array
          description: List of validator indices whose signatures are included in this aggregated attestation.
          items:
            type: integer
            minimum: 0
          example:
            - 0
            - 1
            - 2
            - 3
    types.APIAttesterSlashingResponse:
      type: object
      description: Attester slashing operation included in a beacon block. Contains two conflicting attestations (attestation1 and attestation2) that prove a slashable offense, plus block inclusion metadata.
      properties:
        attestation1_beaconblockroot:
          type: string
          description: Root of the beacon block being voted on by attestation1 (0x-prefixed, 32-byte hex).
          example: '0x4b50f7112f30b4fe9ff61324d9282308b8104874991f796f181cd58511fc67d5'
        attestation1_index:
          type: integer
          description: Committee index within the epoch for attestation1 (>= 0).
          minimum: 0
          example: 0
        attestation1_indices:
          type: array
          description: List of validator indices whose signatures are included in attestation1.
          items:
            type: integer
            minimum: 0
          example:
            - 0
            - 1
            - 2
            - 3
        attestation1_signature:
          type: string
          description: Aggregated BLS signature over the attestation1 data (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0xaa'
        attestation1_slot:
          type: integer
          description: Slot that attestation1 attests to.
          minimum: 0
          example: 12571716
        attestation1_source_epoch:
          type: integer
          description: Source checkpoint epoch of attestation1 (>= 0).
          minimum: 0
          example: 392865
        attestation1_source_root:
          type: string
          description: Root of the source checkpoint referenced by attestation1 (0x-prefixed, 32-byte hex).
          example: '0x1b3891944d7c2fdac53dff9410f18992487e31b1f68d995c1429548effa47268'
        attestation1_target_epoch:
          type: integer
          description: Target checkpoint epoch of attestation1 (>= 0).
          minimum: 0
          example: 392866
        attestation1_target_root:
          type: string
          description: Root of the target checkpoint referenced by attestation1 (0x-prefixed, 32-byte hex).
          example: '0x1898ff52ee440f1ac1ed328becaaa2672c6c50976203d42f672beb5c495c8116'
        attestation2_beaconblockroot:
          type: string
          description: Root of the beacon block being voted on by attestation2 (0x-prefixed, 32-byte hex).
          example: '0x2c262c5cdbddd4b4a673c3a112b8a0d1ca539c15cac2a95e0094c0d28a008e88'
        attestation2_index:
          type: integer
          description: Committee index within the epoch for attestation2 (>= 0).
          minimum: 0
          example: 0
        attestation2_indices:
          type: array
          description: List of validator indices whose signatures are included in attestation2.
          items:
            type: integer
            minimum: 0
          example:
            - 0
            - 1
            - 2
            - 3
        attestation2_signature:
          type: string
          description: Aggregated BLS signature over the attestation2 data (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0xaa'
        attestation2_slot:
          type: integer
          description: Slot that attestation2 attests to.
          minimum: 0
          example: 12571716
        attestation2_source_epoch:
          type: integer
          description: Source checkpoint epoch of attestation2 (>= 0).
          minimum: 0
          example: 392865
        attestation2_source_root:
          type: string
          description: Root of the source checkpoint referenced by attestation2 (0x-prefixed, 32-byte hex).
          example: '0x1b3891944d7c2fdac53dff9410f18992487e31b1f68d995c1429548effa47268'
        attestation2_target_epoch:
          type: integer
          description: Target checkpoint epoch of attestation2 (>= 0).
          minimum: 0
          example: 392866
        attestation2_target_root:
          type: string
          description: Root of the target checkpoint referenced by attestation2 (0x-prefixed, 32-byte hex).
          example: '0x1898ff52ee440f1ac1ed328becaaa2672c6c50976203d42f672beb5c495c8116'
        block_index:
          type: integer
          description: Zero-based index of this attester slashing within the including block’s attester_slashings list.
          minimum: 0
          example: 0
        block_root:
          type: string
          description: Root of the beacon block that included this attester slashing (0x-prefixed, 32-byte hex).
          example: '0x3381dd071cb6a020144bb980758a3a844129a62d74146b0fcdd82c4125cc8d66'
        block_slot:
          type: integer
          description: Slot number of the block that included this attester slashing.
          minimum: 0
          example: 12571718
    types.APIDepositsResponse:
      type: object
      description: Validator deposit included in a beacon block, with block inclusion metadata and deposit data fields.
      properties:
        amount:
          type: integer
          description: Deposited amount in gwei (1 gwei = 1e9 wei).
          example: 32000000000
        block_index:
          type: integer
          description: Zero-based index of this deposit within the including block’s deposits list.
          example: 1
        block_root:
          type: string
          description: Root of the beacon block that included this deposit (0x-prefixed, 32-byte hex).
          example: '0x538d7fba9f4ed29d396d18c225e91e35a5c5bd0aa9a51bd53f18df8fffaf0e4c'
        block_slot:
          type: integer
          description: Slot number of the block that included this deposit.
          example: 11648084
        proof:
          type: string
          nullable: true
          description: SSZ Merkle proof for the deposit inclusion as 0x-prefixed hex; null when not recorded.
          example: null
        publickey:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          example: '0x88527b5e326c4837d765e522995e2937aaa945e79a1183a53fc369db70097484c656efa1cf216c57d88b9d2551c97ce9'
        signature:
          type: string
          description: BLS signature over the deposit message (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0xa8c663fa0386ba988a5916a76b10bc5922ce4e2d03b1baf852e138316c0b296df1ef46aba5063b8fdc2ab7c7163fdd5d05733f7ec334009fddec1f02d78f5f7324f4d696577ef453d29937b2fd1b5b2d610edaa253a8423dd1f17e621f3493cf'
        withdrawalcredentials:
          type: string
          description: 32-byte withdrawal credentials (0x-prefixed hex). Values beginning with 0x01 encode an ETH1 address; values beginning with 0x00 indicate BLS withdrawal credentials.
          example: '0x01000000000000000000000096fb413349cb4ec17410df929898ae9c0e56ae40'
    types.APIProposerSlashingResponse:
      properties:
        block_index:
          type: integer
          example: 0
        block_root:
          type: string
          nullable: true
        block_slot:
          type: integer
          example: 138164
        header1_bodyroot:
          type: string
          example: '0xf44039d2cc6c46ebee262c1484bc47db10516425a49e81f123505329562256d9'
        header1_parentroot:
          type: string
          example: '0x2415ce3a054b0d3f23226a4665fba92efe63c93063680b16ff1e491a73dd5b0c'
        header1_signature:
          type: string
          example: '0xa632f1c085234ef94ef4d1252fb5d9960f373471e5c266aa626c89d1db91302b4ace4fde93a4a5b79b29263b5b90d42f0d1df8f6b534666cd7750e8781d3af962b55656625f9464cf68305ff7e1185dc11955b8bc8273de30cd88c834860b0bc'
        header1_slot:
          type: integer
          example: 138163
        header1_stateroot:
          type: string
          example: '0x0d86b0b4fd08302b87b84983243b688d7cffb81a311d327bd4cbd04b73c806ce'
        header2_bodyroot:
          type: string
          example: '0xef23edd026b330949abfd2063aa48eb420a912294f73e8168e644d6bb603f187'
        header2_parentroot:
          type: string
          example: '0x2415ce3a054b0d3f23226a4665fba92efe63c93063680b16ff1e491a73dd5b0c'
        header2_signature:
          type: string
          example: '0xa805e609614fa2bd108ae47ea3b4474fac5241f7cde40470a022eeca2a242ea15669834713168bd3137118486c8b966a036f8e8c81329c332f459a32437967bf8fa2cc7631bb2507aa9173170470ef47739e792de9c78e3fde3c6e095f6d6faf'
        header2_slot:
          type: integer
          example: 138163
        header2_stateroot:
          type: string
          example: '0xf8e7fbb7df067101f6e85700d0413c63b509b164ee9cd15d310c397447caf4fd'
        proposerindex:
          type: integer
          example: 38069
    types.APIVoluntaryExitResponse:
      type: object
      description: Voluntary exit operation included in a beacon block, with block inclusion metadata and exit message fields.
      properties:
        block_index:
          type: integer
          description: Zero-based index of this voluntary exit within the including block’s voluntary_exits list.
          example: 0
        block_root:
          type: string
          description: Root of the beacon block that included this voluntary exit (0x-prefixed, 32-byte hex).
          example: '0xf3fe4ac2ddab3c97ff4565e305c4451b18ff027559e0e520e884fd3de12c67a4'
        block_slot:
          type: integer
          description: Slot number of the block that included this voluntary exit.
          example: 12771160
        epoch:
          type: integer
          description: Exit epoch declared by the validator in the voluntary exit message (>= 0).
          minimum: 0
          example: 399098
        signature:
          type: string
          description: BLS signature over the voluntary exit message (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0xab6b6d826c14b6141e3406c5227ead15b133993195e96edc05fdeba998d0e0fd96e4ec5f47f6c9eec1558a59042c03d1016e679faf7300bc14737c7178c5cc01b2ea5f345e13cc2e29eeeefaf18cdcde6c0a99d80923ecf8ff8619a4d2511f6e'
        validatorindex:
          type: integer
          description: Index of the validator that submitted the voluntary exit (>= 0).
          minimum: 0
          example: 1815428
    types.APIWithdrawalResponse:
      type: object
      description: Withdrawal included in a beacon block's execution payload, with recipient, amount, and provenance.
      properties:
        address:
          type: string
          description: Recipient execution-layer address (0x-prefixed, 20-byte hex; 40 hex characters after 0x).
          example: '0xb10edd6fa6067dba8d4326f1c8f0d1c791594f13'
        amount:
          type: integer
          description: Withdrawn amount in gwei (1 gwei = 1e9 wei).
          minimum: 0
          example: 18429837
        block_slot:
          type: integer
          description: Slot number of the block that included this withdrawal.
          minimum: 0
          example: 12771160
        validatorindex:
          type: integer
          description: Index of the validator whose balance was withdrawn (>= 0).
          minimum: 0
          example: 1120967
        withdrawalindex:
          type: integer
          description: Global sequential index assigned to this withdrawal (>= 0).
          minimum: 0
          example: 104169659
    types.APISyncCommitteeResponse:
      type: object
      description: Sync committee membership for a single sync period. Includes the period index, the start and end epochs, and the 512 validator indices ordered by sync-committee index. The ordering matches the bit positions in `syncaggregate_bits` found in blocks.
      properties:
        period:
          type: integer
          description: Sync period index (>= 0). Each period spans 256 consecutive epochs.
          minimum: 0
          example: 500
        start_epoch:
          type: integer
          description: Epoch at which the sync period begins. On Ethereum mainnet this equals `period * 256`.
          minimum: 0
          example: 128000
        end_epoch:
          type: integer
          description: Epoch at which the sync period ends (inclusive). On Ethereum mainnet this equals `start_epoch + 255`.
          minimum: 0
          example: 128255
        validators:
          type: array
          description: List of validator indices that form the sync committee for this period, ordered by sync-committee index (length 512 as per the consensus spec).
          items:
            type: integer
            minimum: 0
          minItems: 512
          maxItems: 512
          example:
            - 383220
            - 12142
            - 265015
            - 260079
    types.DashboardRequest:
      type: object
      description: Validator lookup request specifying validator indices and/or public keys.
      properties:
        indicesOrPubkey:
          $ref: '#/components/schemas/primitives.indicesOrPubkeys'
      required:
        - indicesOrPubkey
    types.APIValidatorResponse:
      type: object
      description: State and metadata for a single validator, including status, balances, epochs, and withdrawal summary.
      properties:
        activation_eligibility_epoch:
          type: integer
          description: Epoch at which the validator became eligible for activation. Set to the FAR_FUTURE_EPOCH sentinel when not yet eligible.
          example: 289892
        activation_epoch:
          type: integer
          description: Epoch at which the validator entered the active set. FAR_FUTURE_EPOCH when not yet active.
          example: 290297
        balance:
          type: integer
          description: Current validator balance in gwei at the latest processed epoch for this response.
          example: 32014494648
        effective_balance:
          type: integer
          description: Effective balance used for reward/penalty calculations in gwei (capped at 32,000,000,000 gwei).
          example: 32000000000
        exit_epoch:
          type: integer
          description: Epoch at which the validator begins exiting. FAR_FUTURE_EPOCH when no exit is scheduled.
          example: 9223372036854776000
        last_attestation_slot:
          type: integer
          description: Most recent slot at which an attestation from this validator was observed in a canonical block.
          example: 12766062
        name:
          type: string
          description: Optional human-readable label associated with the validator. Empty string when not set.
          example: name
        pubkey:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          example: '0xb73ecd964c9779506a3209ec40dd40d765b0464fef281d77ac8a559fa9e2a9cff8b6b2e09b8f6360b119ba7a963c5b81'
        slashed:
          type: boolean
          description: True when the validator has been slashed.
          example: false
        status:
          type: string
          description: 'Current validator state. One of: active_online, exiting_online, slashing_online, active_offline, exiting_offline, slashing_offline, pending_initialized, pending, deposited, exited, slashed.'
          enum:
            - active_online
            - exiting_online
            - slashing_online
            - active_offline
            - exiting_offline
            - slashing_offline
            - pending_initialized
            - pending
            - deposited
            - exited
            - slashed
          example: active_online
        validator_index:
          type: integer
          description: Validator index (>= 0).
          minimum: 0
          example: 1435245
        withdrawable_epoch:
          type: integer
          description: Epoch at which the validator’s balance becomes withdrawable after exit or slashing. FAR_FUTURE_EPOCH when not yet withdrawable.
          example: 9223372036854776000
        withdrawal_credentials:
          type: string
          description: 32-byte withdrawal credentials (0x-prefixed hex). Prefix 0x01 encodes an execution address; 0x00 indicates BLS withdrawal credentials.
          example: '0x0100000000000000000000005d652886f0b4ae0b1b7d6be5b7e2d555aafdc812'
        total_withdrawals:
          type: integer
          description: Cumulative amount withdrawn by this validator in gwei, including the latest exported day and canonical blocks of the current day.
          example: 1072078769
    types.ApiValidatorEth1Response:
      type: object
      description: Validator derived from deposit events funded by a specific execution-layer address.
      properties:
        public_key:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          example: '0xb73ecd964c9779506a3209ec40dd40d765b0464fef281d77ac8a559fa9e2a9cff8b6b2e09b8f6360b119ba7a963c5b81'
        valid_signature:
          type: boolean
          description: True when the deposit signature validates against the public key and deposit message.
          example: true
        validator_index:
          type: integer
          description: Validator index (>= 0) resolved from the public key; null when the public key has no assigned index.
          minimum: 0
          nullable: true
          example: 1071937
    types.ApiValidatorPerformanceResponse:
      type: object
      description: Consensus-layer performance metrics for a single validator over multiple lookback windows.
      properties:
        balance:
          type: integer
          description: Current validator balance in gwei at the time of computation.
          example: 2011101824120
        performance1d:
          type: integer
          description: Net consensus-layer rewards over the last 1 day, in gwei. Negative values indicate net penalties.
          example: 126585316
        performance7d:
          type: integer
          description: Net consensus-layer rewards over the last 7 days, in gwei. Used for leaderboard ranking by default.
          example: 1467804126
        performance31d:
          type: integer
          description: Net consensus-layer rewards over the last 31 days, in gwei.
          example: 5128497140
        performance365d:
          type: integer
          description: Net consensus-layer rewards over the last 365 days, in gwei.
          example: 11101824120
        performancetotal:
          type: integer
          description: Cumulative consensus-layer rewards since genesis (if available), in gwei. May be omitted by some endpoints.
          example: 11101824120
        rank7d:
          type: integer
          description: Leaderboard rank computed using the 7-day performance window (1 = best).
          example: 1
        validatorindex:
          type: integer
          description: Validator index (>= 0).
          example: 2030996
    types.ApiValidatorDailyStatsResponse:
      type: object
      description: Daily statistics for a single validator aggregated over a beaconchain-day. Includes balance snapshots (gwei), duty counts, and deposit/withdrawal sums.
      properties:
        validatorindex:
          type: integer
          description: Validator index (>= 0).
          minimum: 0
          example: 20
        day:
          type: integer
          description: Beaconchain-day index since genesis (>= 0). A day spans 24 hours derived from chain time (SlotsPerEpoch × SecondsPerSlot).
          minimum: 0
          example: 1774
        day_start:
          type: string
          format: date-time
          description: Start timestamp (UTC) of the day in RFC 3339 format.
          example: '2025-10-10T12:00:23Z'
        day_end:
          type: string
          format: date-time
          description: End timestamp (UTC) of the day in RFC 3339 format.
          example: '2025-10-11T12:00:23Z'
        start_balance:
          type: integer
          description: Validator balance at the start of the day, in gwei.
          example: 32007258984
        end_balance:
          type: integer
          description: Validator balance at the end of the day, in gwei.
          example: 32009280345
        min_balance:
          type: integer
          description: Minimum observed validator balance during the day, in gwei.
          example: 0
        max_balance:
          type: integer
          description: Maximum observed validator balance during the day, in gwei.
          example: 0
        start_effective_balance:
          type: integer
          description: Effective balance at the start of the day, in gwei.
          example: 32000000000
        end_effective_balance:
          type: integer
          description: Effective balance at the end of the day, in gwei.
          example: 32000000000
        min_effective_balance:
          type: integer
          description: Minimum observed effective balance during the day, in gwei.
          example: 0
        max_effective_balance:
          type: integer
          description: Maximum observed effective balance during the day, in gwei.
          example: 0
        proposed_blocks:
          type: integer
          description: Number of blocks proposed by this validator and included in the canonical chain during the day.
          example: 0
        missed_blocks:
          type: integer
          description: Number of scheduled block proposals this validator missed during the day.
          example: 0
        orphaned_blocks:
          type: integer
          description: Number of blocks proposed by this validator that were not part of the canonical chain (reorged/orphaned) during the day.
          example: 0
        missed_attestations:
          type: integer
          description: Number of attestation duties missed by this validator during the day.
          example: 0
        orphaned_attestations:
          type: integer
          description: Number of attestations from this validator recorded in non-canonical blocks during the day.
          example: 0
        attester_slashings:
          type: integer
          description: Number of attester slashing events attributed to this validator during the day.
          example: 0
        proposer_slashings:
          type: integer
          description: Number of proposer slashing events attributed to this validator during the day.
          example: 0
        deposits:
          type: integer
          description: Number of deposit operations recorded for this validator during the day.
          example: 0
        deposits_amount:
          type: integer
          description: Total amount deposited for this validator during the day, in gwei.
          example: 0
        withdrawals:
          type: integer
          description: Number of withdrawals credited to this validator during the day.
          example: 0
        withdrawals_amount:
          type: integer
          description: Total amount withdrawn from this validator during the day, in gwei.
          example: 0
        participated_sync:
          type: integer
          description: Number of sync committee signatures from this validator recorded during the day.
          example: 0
        missed_sync:
          type: integer
          description: Number of expected sync committee signatures that were not recorded during the day.
          example: 0
        orphaned_sync:
          type: integer
          description: Number of sync committee signatures from this validator recorded in non-canonical blocks during the day.
          example: 0
    types.ApiWithdrawalCredentialsResponse:
      type: object
      description: Mapping of a validator’s public key to its index for a given withdrawal credentials lookup.
      properties:
        publickey:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          example: '0x91cf1aeece0d14910c88f54edcfc988399db8ffa846f08d1c2febe05680614818b3b8c7d772c4e4ca983c74b453da03a'
        validatorindex:
          type: integer
          description: Validator index (>= 0).
          minimum: 0
          example: 1151320
    types.ApiValidatorAttestationEfficiencyResponse:
      type: object
      description: 'Attestation inclusion effectiveness for a validator expressed as a normalized score. The score is computed from the underlying inclusion percentage as: score = 1 + (1 − percentage/100) = 2 − percentage/100. A score of 1.0 indicates perfect effectiveness (100% inclusion in the most recently completed epoch); a score approaching 2.0 indicates poor effectiveness (0% inclusion).'
      properties:
        validatorindex:
          type: integer
          description: Validator index (>= 0).
          minimum: 0
          example: 21
        attestation_efficiency:
          type: number
          description: Normalized attestation effectiveness score (1.0 = best, 2.0 = worst). See top-level description for the formula. Computed for the most recently completed epoch.
          minimum: 1
          maximum: 2
          example: 1.0175
    types.ApiValidatorAttestationsResponse:
      type: object
      description: Per-validator attestation record within an epoch window. Each item corresponds to a scheduled attestation duty for a specific validator and includes the slot attested to, the observed inclusion slot (when included), a status flag, and week-based grouping metadata used in UI charts.
      properties:
        attesterslot:
          type: integer
          description: Slot number that the validator attested to (the source of the vote). Always non-negative.
          minimum: 0
          example: 12779525
        committeeindex:
          type: integer
          description: Committee index within the epoch for this attestation (>= 0). May be 0 when not recorded in this dataset.
          minimum: 0
          example: 0
        epoch:
          type: integer
          description: Epoch containing the attestation duty (>= 0).
          minimum: 0
          example: 399360
        inclusionslot:
          type: integer
          description: Slot number of the beacon block that included the attestation when it was observed on-chain. Set to 0 when the attestation was not observed/included (missed).
          minimum: 0
          example: 12779526
        status:
          type: integer
          description: Attestation status flag. 1 indicates the attestation was observed and included on-chain; 0 indicates it was missed.
          example: 1
        validatorindex:
          type: integer
          description: Validator index (>= 0) to whom this attestation duty applies.
          minimum: 0
          example: 20
        week:
          type: integer
          description: Epoch-based week number computed as `epoch / (EpochsPerDay * 7)`.
          minimum: 0
          example: 253
        week_start:
          type: string
          format: date-time
          description: Start timestamp (UTC, RFC 3339) of the week containing `epoch`.
          example: '2025-10-07T12:00:23Z'
        week_end:
          type: string
          format: date-time
          description: End timestamp (UTC, RFC 3339) of the week containing `epoch`.
          example: '2025-10-14T12:00:23Z'
    types.ApiValidatorBalanceHistoryResponse:
      type: object
      description: Per-epoch balance snapshot for a validator, including effective balance and week grouping metadata.
      properties:
        balance:
          type: integer
          description: Validator balance in gwei at the end of the epoch.
          minimum: 0
          example: 32014494648
        effectivebalance:
          type: integer
          description: Effective balance in gwei used for rewards/penalties (capped at 32,000,000,000 gwei when fully effective).
          minimum: 0
          example: 32000000000
        epoch:
          type: integer
          description: Epoch number corresponding to this balance snapshot (>= 0).
          minimum: 0
          example: 399359
        validatorindex:
          type: integer
          description: Validator index to whom this balance snapshot applies (>= 0).
          minimum: 0
          example: 34523
        week:
          type: integer
          description: Epoch-based week number computed as `epoch / (EpochsPerDay * 7)`.
          minimum: 0
          example: 253
        week_start:
          type: string
          format: date-time
          description: Start timestamp (UTC, RFC 3339) of the week containing `epoch`.
          example: '2025-10-07T12:00:23Z'
        week_end:
          type: string
          format: date-time
          description: End timestamp (UTC, RFC 3339) of the week containing `epoch`.
          example: '2025-10-14T12:00:23Z'
    types.ApiValidatorBlsChangeResponse:
      type: object
      description: On-chain record of a validator’s BLS-to-execution credential change. Includes consensus-layer inclusion metadata, the validator’s BLS pubkey and signature over the change message, the original 0x00 withdrawal credentials, and the new 0x01 credentials derived from the execution address.
      properties:
        epoch:
          type: integer
          description: Epoch containing the block that included the credential change (>= 0).
          minimum: 0
          example: 200820
        slot:
          type: integer
          description: Slot number of the beacon block that included the credential change (>= 0).
          minimum: 0
          example: 6426248
        blockroot:
          type: string
          description: 0x-prefixed 32-byte root of the including beacon block.
          pattern: ^0x[a-fA-F0-9]{64}$
          example: '0x387e15e80bfce46c2217cd149ec0a03a5f82ce393de12936ca243e076517148b'
        validatorindex:
          type: integer
          description: Index of the validator that submitted the credential change (>= 0).
          minimum: 0
          example: 20
        bls_pubkey:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          pattern: ^0x[a-fA-F0-9]{96}$
          example: '0x8b84918f955498cd0f6f44537cd0745d29ceffe16a37a353da746ad6879ec1c5992520708aad13b2333ce562faef083c'
        bls_signature:
          type: string
          description: BLS signature over the change message (96 bytes; 0x-prefixed hex with 192 hex characters).
          pattern: ^0x[a-fA-F0-9]{192}$
          example: '0xb735398d821c5eb6356c71e35d59dd29ee56429d03dd443746d3de1bffb9049ed1bd45ab115de42ee3c6d0b69017d9b11413e1c7a0640553c14f8d2076369d51301720f3861c9b824a8a486d116c9bfe38c53747b33d3f1e664ce5ead157ec16'
        address:
          type: string
          description: Execution-layer address encoded in the new 0x01 withdrawal credentials (0x-prefixed, 20-byte hex).
          pattern: ^0x[a-fA-F0-9]{40}$
          example: '0x23a64e36ae03d85a6121e55e48f6b8eb63d72f76'
        withdrawalcredentials_0x00:
          type: string
          description: Original withdrawal credentials prior to the change (32 bytes; 0x-prefixed hex, starts with 0x00).
          pattern: ^0x[a-fA-F0-9]{64}$
          example: '0x009081da37d4f11d87592b89734db953de64fcb381436b235551b209f3fac343'
        withdrawalcredentials_0x01:
          type: string
          description: New withdrawal credentials after the change (32 bytes; 0x-prefixed hex, starts with 0x01 = 0x01 || 0x00..00 || address).
          pattern: ^0x[a-fA-F0-9]{64}$
          example: '0x01000000000000000000000023a64e36ae03d85a6121e55e48f6b8eb63d72f76'
    types.ApiValidatorDepositsResponse:
      type: object
      description: Execution-layer validator deposit event with execution metadata and deposit data fields.
      properties:
        amount:
          type: integer
          description: Deposited amount in gwei (1 gwei = 1e9 wei).
          example: 32000000000
        block_number:
          type: integer
          description: Execution-layer block number that included the transaction.
          example: 17111875
        block_ts:
          type: integer
          description: Block timestamp as Unix time in seconds (UTC).
          example: 1682287571
        from_address:
          type: string
          description: Sender address funding the deposit (0x-prefixed, 20-byte hex Ethereum address).
          example: '0xd3db01ad737f2b41676e96ad75a6368cfe7a878e'
        merkletree_index:
          type: string
          description: Merkle tree index of the deposit within the Ethereum deposit contract; 0x-prefixed hex-encoded uint64 as emitted in the DepositEvent log.
          example: '0xd660090000000000'
        publickey:
          type: string
          description: BLS12-381 validator public key (48 bytes; 0x-prefixed hex with 96 hex characters).
          example: '0x96dcc8a539e26dba7604356711abde2c2f1cd0f59a3405d11d1f029bd7e89062a09c5a7a47f9095f428fc1aff092871e'
        removed:
          type: boolean
          description: True if the associated log was removed due to an execution chain reorganization.
          example: false
        signature:
          type: string
          description: BLS signature over the deposit message (96 bytes; 0x-prefixed hex with 192 hex characters).
          example: '0x8a186b85f9afd69c5d256c8364577a797b38e7d2f8f4ede4c570343c28427e8795fd4a940cdbacbaef8d1a22f1ecb1501824dcb791def49938b213827f5a65e58bf531174da556410e3d6480f8d129795eb8c0c3e31f8b6b7ce679d32cca1431'
        tx_hash:
          type: string
          description: Hash of the execution transaction that carried the deposit (0x-prefixed 32-byte hex).
          example: '0x3b1ba13da5892cfeb80f1f1ccf09505214d5564a65b9d3fd413181348dfafdde'
        tx_index:
          type: integer
          description: Index of the transaction within its block (0-based).
          example: 199
        tx_input:
          type: string
          description: Raw calldata of the transaction (0x-prefixed hex), containing the deposit payload for the DepositContract.
          example: '0x00'
        valid_signature:
          type: boolean
          description: Indicates whether the deposit signature is valid for the provided public key and deposit message.
          example: true
        withdrawal_credentials:
          type: string
          description: 32-byte withdrawal credentials (0x-prefixed hex). Values beginning with 0x01 encode an ETH1 address; values beginning with 0x00 indicate BLS withdrawal credentials.
          example: '0x0100000000000000000000009ba848a47a796b18de48b6dc7c4327ac9c06740e'
    types.ApiValidatorExecutionPerformanceResponse:
      type: object
      description: Execution-layer reward totals for a single validator over multiple lookback windows. Values represent net ETH earned from priority fees and MEV payments attributed to the validator’s proposals and are expressed in wei.
      properties:
        performance1d:
          type: integer
          description: Net execution-layer rewards over the last 1 day, in wei.
          minimum: 0
          example: 470167509840
        performance7d:
          type: integer
          description: Net execution-layer rewards over the last 7 days, in wei.
          minimum: 0
          example: 7470167509840
        performance31d:
          type: integer
          description: Net execution-layer rewards over the last 31 days, in wei.
          minimum: 0
          example: 357470167509840
        performance365d:
          type: integer
          description: Net execution-layer rewards over the last 365 days, in wei.
          minimum: 0
          example: 10357470167509840
        performanceTotal:
          type: integer
          description: Cumulative execution-layer rewards since genesis (when available), in wei.
          minimum: 0
          example: 438451008639390900
        validatorindex:
          type: integer
          description: Validator index (>= 0).
          minimum: 0
          example: 20
    types.ApiValidatorIncomeHistory:
      type: object
      description: Detailed per-epoch income breakdown for a validator. Unless noted otherwise, all amounts are in gwei.
      properties:
        attestation_head_reward:
          type: integer
          description: Reward from correct head vote in the attestation, in gwei.
          example: 1024
        attestation_source_penalty:
          type: integer
          description: Penalty from incorrect/missed source vote, in gwei (non-positive; represented as unsigned magnitude when stored by some backends).
          example: 0
        attestation_source_reward:
          type: integer
          description: Reward from correct source vote in the attestation, in gwei.
          example: 2048
        attestation_target_penalty:
          type: integer
          description: Penalty from incorrect/missed target vote, in gwei (non-positive; represented as unsigned magnitude when stored by some backends).
          example: 0
        attestation_target_reward:
          type: integer
          description: Reward from correct target vote in the attestation, in gwei.
          example: 3072
        finality_delay_penalty:
          type: integer
          description: Penalty due to finality delays in the network (applies during periods with no finality), in gwei.
          example: 0
        proposals_missed:
          type: integer
          description: Number of scheduled block proposals the validator missed during this epoch.
          minimum: 0
          example: 0
        proposer_attestation_inclusion_reward:
          type: integer
          description: Proposer reward for including attestations, in gwei.
          example: 512
        proposer_slashing_inclusion_reward:
          type: integer
          description: Proposer reward for including a proposer slashing, in gwei.
          example: 0
        proposer_sync_inclusion_reward:
          type: integer
          description: Proposer reward for including a sync committee signature set, in gwei.
          example: 0
        slashing_penalty:
          type: integer
          description: Penalty due to being slashed or due to correlations, in gwei.
          example: 0
        slashing_reward:
          type: integer
          description: Reward earned from participating in a slashing (as whistleblower/aggregator), in gwei.
          example: 0
        sync_committee_penalty:
          type: integer
          description: Penalty from missed/incorrect sync committee participation, in gwei.
          example: 0
        sync_committee_reward:
          type: integer
          description: Reward from participating in the sync committee for the epoch, in gwei.
          example: 0
        tx_fee_reward_wei:
          type: string
          description: Execution-layer fee reward (priority fees and/or MEV payment) attributed to the validator for this epoch, as a decimal string in wei.
          example: '470167509840'
    types.ApiValidatorIncomeHistoryResponse:
      type: object
      description: Per-epoch income detail entry for a validator, including consensus-layer reward/penalty breakdown and execution tips, with week grouping metadata.
      properties:
        epoch:
          type: integer
          description: Epoch number this income record belongs to (>= 0).
          minimum: 0
          example: 398940
        income:
          $ref: '#/components/schemas/types.ApiValidatorIncomeHistory'
        validatorindex:
          type: integer
          description: Validator index (>= 0).
          minimum: 0
          example: 1815428
        week:
          type: integer
          description: Epoch-based week number computed as `epoch / (EpochsPerDay * 7)`.
          minimum: 0
          example: 253
        week_start:
          type: string
          format: date-time
          description: Start timestamp (UTC, RFC 3339) of the week containing `epoch`.
          example: '2025-10-07T12:00:23Z'
        week_end:
          type: string
          format: date-time
          description: End timestamp (UTC, RFC 3339) of the week containing `epoch`.
          example: '2025-10-14T12:00:23Z'
    types.ApiValidatorProposalsResponse:
      type: object
      description: Beacon block proposed by one of the specified validators, including consensus metadata (roots, proposer, operation counts) and execution payload fields when available. Execution fields are null for pre-Merge slots or blocks without an execution payload.
      properties:
        attestationscount:
          type: integer
          description: Number of attestations included in this block.
          example: 8
        attesterslashingscount:
          type: integer
          description: Number of attester slashing operations included in this block.
          example: 0
        blockroot:
          type: string
          description: Hash tree root of the beacon block header (0x-prefixed hex).
          example: '0x2569c0972196fcb151b6c3ce6fbb4dba54b38f570296e67811c01f2d5d41287c'
        depositscount:
          type: integer
          description: Number of deposit operations included in this block.
          example: 0
        epoch:
          type: integer
          description: Beacon chain epoch that contains this slot.
          example: 399361
        eth1data_blockhash:
          type: string
          description: Execution-layer block hash voted in the Eth1Data of this block (0x-prefixed hex).
          example: '0x0958d83550263ff0d9f9a0bc5ea3cd2a136e0933b6f43cbb17f36e4da8d809b1'
        eth1data_depositcount:
          type: integer
          description: Cumulative number of deposits as reported in Eth1Data.
          example: 2045305
        eth1data_depositroot:
          type: string
          description: Deposit tree root as reported in Eth1Data (0x-prefixed hex).
          example: '0x2ebc563cabdbbacbc56f0de1d2d1c2d5315a4b071fcd8566aabbf0a45161c64e'
        exec_base_fee_per_gas:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: EIP-1559 base fee per gas for the execution payload (wei per gas); null if no payload.
          example: 594721803
        exec_block_hash:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Hash of the execution-layer block included as the payload; null if no payload.
          example: '0x03d9906c696b81da13be84d4daaca6b98d863582170cc59c7eab84df78460065'
        exec_block_number:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Number of the execution-layer block included as the payload; null if no payload.
          example: 23553917
        exec_extra_data:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Extra data field from the execution block header (0x-prefixed hex); null if no payload.
          example: '0x546974616e2028746974616e6275696c6465722e78797a29'
        exec_fee_recipient:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Fee recipient (coinbase) address of the execution payload; null if no payload.
          example: '0x4838b106fce9647bdf1e7877bf73ce8b0bad5f97'
        exec_gas_limit:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Gas limit of the execution payload block; null if no payload.
          example: 44912069
        exec_gas_used:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Gas used by the execution payload block; null if no payload.
          example: 35509020
        exec_logs_bloom:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Logs bloom filter from the execution block header; null if no payload.
          example: '0x7ffd777ef37f3df774ff777fffc9ffbff7fb1f6df6d6b7ff36ff93697ffff89f9effdf7ff0fbfd5ff777fadbffabfdfbfff7ee7ffeeefdbbdfff7ff7ffbfefaff7ffff38ef79bafbda73bf6ec3fbbef7cdef5ffb9f7d73b4ff67fdffff2d7bf9dff7edaf7f7f9376b4eff7df7eeb3fefff7bfd6ef6cce76f7ffdfdf7d97f3ffb77783ffbfdaaeffe6cff9ffd3abfccd3ded2dfb5ffddfbffefedfde7e3fefffbfff7a5eabfbdbbf33f7d7fefdfffbffd3eefcffd31beffefb7fffe2dffedebffef9fdb7efdfbdf7badfbad75f7fdfff69ffdfeffff6cabdd6fffbdae7f7fefff77febcedf7bdfb23f6f7daedfcfbd9bcefbeff506f7ed5da5cbdf9bff7def7ff'
        exec_parent_hash:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Parent hash of the execution payload block; null if no payload.
          example: '0xc6cd20028f88f95bbbe4a0c5efa11b6912e19e52f6d85fd085274356ba398665'
        exec_random:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: prevRandao (mixHash) value in the execution block header; null if no payload.
          example: '0xad0676fd78bae6edb5492c7fba3a38381a18e727a80df4b4e3e266de342958c9'
        exec_receipts_root:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: Receipts root of the execution payload block; null if no payload.
          example: '0x22353d888a943233ccf6a9866625571b469a7c50b53971b31358d097089ac478'
        exec_state_root:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableString'
          description: State root of the execution payload block; null if no payload.
          example: '0x123a8fdd8ff60b95c4b5118aef4ec9e1ba768b0be601ae1e33585c0ad6219764'
        exec_timestamp:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Timestamp of the execution payload block (Unix seconds); null if no payload.
          example: 1760178851
        exec_transactions_count:
          allOf:
            - $ref: '#/components/schemas/primitives.NullableInteger'
          description: Number of transactions included in the execution payload; null if no payload.
          example: 347
        graffiti:
          type: string
          description: 32-byte graffiti field from the beacon block body as 0x-prefixed hex.
          example: '0x5800000000000000000000000000000000000000000000000000000000000000'
        graffiti_text:
          type: string
          description: Graffiti rendered as UTF-8 text when printable; may be empty if not decodable.
          example: X
        parentroot:
          type: string
          description: Root of the parent beacon block header (0x-prefixed hex).
          example: '0x1a6b6a0ae64ee46e6dab6929f5bcb0a34e051496e82bf6233e324f9024c10731'
        proposer:
          type: integer
          description: Index of the validator that proposed this block.
          example: 341240
        proposerslashingscount:
          type: integer
          description: Number of proposer slashing operations included in this block.
          example: 0
        randaoreveal:
          type: string
          description: Proposer's RANDAO reveal (BLS signature) contributing to beacon chain randomness (0x-prefixed hex).
          example: '0x8dc36dbf1f926e2bcb5d7978971398324307a09d5a95f14d24d1954c7f92711e1264fbfd8061f95336bf6a87a83668901987b22acb60a2fc3baf0f1a12bc33ea6825062b4d4a04123ff5c03aaff66a7b5b4e25c2aedda5c2ba96e475856e6981'
        signature:
          type: string
          description: BLS signature of the beacon block header (0x-prefixed hex).
          example: '0xae1c866040219da4da2b4e71d0721a3aa7843dd4b39af3c8e8efe04a448184e4c216d71b99062dc39e0922d7b352033015b6c7fe5816de9d2316444fb7063e7e1f66e79ecfd99ec9828a3c31a7db38b7d59a5771e761b507f1562a600759cc31'
        slot:
          type: integer
          description: Beacon slot number of this block.
          example: 12779569
        stateroot:
          type: string
          description: Root of the beacon state in the block header (0x-prefixed hex).
          example: '0x53f155484c3261c490d63ea8245c4937744b9328c94e29c49e90c971312a1811'
        status:
          type: string
          description: 'Block status code: ''0'' scheduled, ''1'' proposed (canonical), ''2'' missed, ''3'' orphaned.'
          example: '1'
        syncaggregate_bits:
          type: string
          description: 512-bit bitfield (0x-prefixed hex) indicating which sync committee members participated; one bit per member.
          example: '0xfffffffffdfffffffffffffffffffffffffbffffffffffffffffdffffdffffffffffffefffffffffffffffffffffffffffffffbfffffffffffffffffffffffff'
        syncaggregate_participation:
          type: number
          description: Participation ratio of the sync committee for this block (0..1).
          example: 0.98828125
        syncaggregate_signature:
          type: string
          description: Aggregated BLS signature of the sync committee for this block (0x-prefixed hex).
          example: '0xa4da2b867397442ee4744be9c22a2ff0c0a97d021741038d1921d2065e6ff8d94730025711007f7b7626efbf98e0a523000357a5f8a708b8926fc1e989daed25cc26008cfe945e30dcf0ea9ed34ea4238b62697775f0ad0b639d2240fc048857'
        voluntaryexitscount:
          type: integer
          description: Number of voluntary exit operations included in this block.
          example: 0
    types.ApiValidatorWithdrawalResponse:
      type: object
      description: Withdrawal credited to a validator and included in a beacon block's execution payload.
      properties:
        epoch:
          type: integer
          description: Epoch containing the block that included this withdrawal (>= 0).
          minimum: 0
          example: 399379
        slot:
          type: integer
          description: Slot number of the beacon block that included this withdrawal (>= 0).
          minimum: 0
          example: 12780154
        blockroot:
          type: string
          description: 0x-prefixed 32-byte root of the including beacon block.
          pattern: ^0x[a-fA-F0-9]{64}$
          example: '0xf5068b6240d2ca8d77b6924a4397263fda4647b09c7d767865637643a7be421d'
        withdrawalindex:
          type: integer
          description: Global sequential index assigned to this withdrawal (>= 0).
          minimum: 0
          example: 104312607
        validatorindex:
          type: integer
          description: Index of the validator whose balance was withdrawn (>= 0).
          minimum: 0
          example: 1440116
        address:
          type: string
          description: Recipient execution-layer address (0x-prefixed, 20-byte hex; 40 hex characters after 0x).
          pattern: ^0x[a-fA-F0-9]{40}$
          example: '0x4c66c2055f6a7a01e102bde8d8d71d1d36667e21'
        amount:
          type: integer
          description: Withdrawn amount in gwei (1 gwei = 1e9 wei).
          minimum: 0
          example: 18402466
    types.ApiProposalLuckResponse:
      properties:
        average_proposal_interval:
          type: number
          description: The average slot interval between proposals for the given set of validators
          example: 1115586.53125
        next_proposal_estimate_ts:
          type: integer
          description: The estimated timestamp of the next proposal
          example: 1767606011
        proposal_luck:
          type: number
          description: The proposal luck for the given set of validators as a percentage
          example: 0.43039603829089507
        time_frame_name:
          type: string
          description: The timeframe for which the luck is calculated
          example: year
    types.ApiValidatorQueueResponse:
      type: object
      description: Current validator activation and exit queue metrics at the time of the request.
      properties:
        beaconchain_entering:
          type: integer
          description: Number of validators currently in the activation queue (awaiting entry into the active set).
          minimum: 0
          example: 7493
        beaconchain_exiting:
          type: integer
          description: Number of validators that have initiated exit and are in the exit queue.
          minimum: 0
          example: 55869
        validatorscount:
          type: integer
          description: Total number of validators known to the explorer (active + pending + exiting), not limited to either queue.
          minimum: 0
          example: 1031945
        beaconchain_entering_balance:
          type: integer
          description: Sum of effective balances for validators in the activation queue, in gwei.
          minimum: 0
          example: 1363143622559455
        beaconchain_exiting_balance:
          type: integer
          description: Sum of effective balances for validators in the exit queue, in gwei.
          minimum: 0
          example: 2365910000000000
x-tagGroups:
  - name: Consensus Layer
    tags:
      - Epochs
      - Slots
      - Validators
      - Rewards
      - Sync Committees
      - Rocketpool
      - ETH.Store®
  - name: Execution Layer
    tags:
      - Validator Deposits
      - Blocks
      - Addresses
      - Gas
  - name: Other
    tags:
      - Network
      - User
      - Misc
