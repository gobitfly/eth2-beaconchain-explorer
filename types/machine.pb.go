// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: machine.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MachineMetricSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExporterVersion string `protobuf:"bytes,2,opt,name=exporter_version,json=exporterVersion,proto3" json:"exporter_version,omitempty"`
	// system
	CpuCores                      uint64 `protobuf:"varint,3,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	CpuThreads                    uint64 `protobuf:"varint,4,opt,name=cpu_threads,json=cpuThreads,proto3" json:"cpu_threads,omitempty"`
	CpuNodeSystemSecondsTotal     uint64 `protobuf:"varint,5,opt,name=cpu_node_system_seconds_total,json=cpuNodeSystemSecondsTotal,proto3" json:"cpu_node_system_seconds_total,omitempty"`
	CpuNodeUserSecondsTotal       uint64 `protobuf:"varint,6,opt,name=cpu_node_user_seconds_total,json=cpuNodeUserSecondsTotal,proto3" json:"cpu_node_user_seconds_total,omitempty"`
	CpuNodeIowaitSecondsTotal     uint64 `protobuf:"varint,7,opt,name=cpu_node_iowait_seconds_total,json=cpuNodeIowaitSecondsTotal,proto3" json:"cpu_node_iowait_seconds_total,omitempty"`
	CpuNodeIdleSecondsTotal       uint64 `protobuf:"varint,8,opt,name=cpu_node_idle_seconds_total,json=cpuNodeIdleSecondsTotal,proto3" json:"cpu_node_idle_seconds_total,omitempty"`
	MemoryNodeBytesTotal          uint64 `protobuf:"varint,9,opt,name=memory_node_bytes_total,json=memoryNodeBytesTotal,proto3" json:"memory_node_bytes_total,omitempty"`
	MemoryNodeBytesFree           uint64 `protobuf:"varint,10,opt,name=memory_node_bytes_free,json=memoryNodeBytesFree,proto3" json:"memory_node_bytes_free,omitempty"`
	MemoryNodeBytesCached         uint64 `protobuf:"varint,11,opt,name=memory_node_bytes_cached,json=memoryNodeBytesCached,proto3" json:"memory_node_bytes_cached,omitempty"`
	MemoryNodeBytesBuffers        uint64 `protobuf:"varint,12,opt,name=memory_node_bytes_buffers,json=memoryNodeBytesBuffers,proto3" json:"memory_node_bytes_buffers,omitempty"`
	DiskNodeBytesTotal            uint64 `protobuf:"varint,13,opt,name=disk_node_bytes_total,json=diskNodeBytesTotal,proto3" json:"disk_node_bytes_total,omitempty"`
	DiskNodeBytesFree             uint64 `protobuf:"varint,14,opt,name=disk_node_bytes_free,json=diskNodeBytesFree,proto3" json:"disk_node_bytes_free,omitempty"`
	DiskNodeIoSeconds             uint64 `protobuf:"varint,15,opt,name=disk_node_io_seconds,json=diskNodeIoSeconds,proto3" json:"disk_node_io_seconds,omitempty"`
	DiskNodeReadsTotal            uint64 `protobuf:"varint,16,opt,name=disk_node_reads_total,json=diskNodeReadsTotal,proto3" json:"disk_node_reads_total,omitempty"`
	DiskNodeWritesTotal           uint64 `protobuf:"varint,17,opt,name=disk_node_writes_total,json=diskNodeWritesTotal,proto3" json:"disk_node_writes_total,omitempty"`
	NetworkNodeBytesTotalReceive  uint64 `protobuf:"varint,18,opt,name=network_node_bytes_total_receive,json=networkNodeBytesTotalReceive,proto3" json:"network_node_bytes_total_receive,omitempty"`
	NetworkNodeBytesTotalTransmit uint64 `protobuf:"varint,19,opt,name=network_node_bytes_total_transmit,json=networkNodeBytesTotalTransmit,proto3" json:"network_node_bytes_total_transmit,omitempty"`
	MiscNodeBootTsSeconds         uint64 `protobuf:"varint,20,opt,name=misc_node_boot_ts_seconds,json=miscNodeBootTsSeconds,proto3" json:"misc_node_boot_ts_seconds,omitempty"`
	MiscOs                        string `protobuf:"bytes,21,opt,name=misc_os,json=miscOs,proto3" json:"misc_os,omitempty"`
	// do not store in bigtable but include them in generated model
	Machine *string `protobuf:"bytes,22,opt,name=machine,proto3,oneof" json:"machine,omitempty"`
}

func (x *MachineMetricSystem) Reset() {
	*x = MachineMetricSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineMetricSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineMetricSystem) ProtoMessage() {}

func (x *MachineMetricSystem) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineMetricSystem.ProtoReflect.Descriptor instead.
func (*MachineMetricSystem) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{0}
}

func (x *MachineMetricSystem) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MachineMetricSystem) GetExporterVersion() string {
	if x != nil {
		return x.ExporterVersion
	}
	return ""
}

func (x *MachineMetricSystem) GetCpuCores() uint64 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *MachineMetricSystem) GetCpuThreads() uint64 {
	if x != nil {
		return x.CpuThreads
	}
	return 0
}

func (x *MachineMetricSystem) GetCpuNodeSystemSecondsTotal() uint64 {
	if x != nil {
		return x.CpuNodeSystemSecondsTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetCpuNodeUserSecondsTotal() uint64 {
	if x != nil {
		return x.CpuNodeUserSecondsTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetCpuNodeIowaitSecondsTotal() uint64 {
	if x != nil {
		return x.CpuNodeIowaitSecondsTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetCpuNodeIdleSecondsTotal() uint64 {
	if x != nil {
		return x.CpuNodeIdleSecondsTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetMemoryNodeBytesTotal() uint64 {
	if x != nil {
		return x.MemoryNodeBytesTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetMemoryNodeBytesFree() uint64 {
	if x != nil {
		return x.MemoryNodeBytesFree
	}
	return 0
}

func (x *MachineMetricSystem) GetMemoryNodeBytesCached() uint64 {
	if x != nil {
		return x.MemoryNodeBytesCached
	}
	return 0
}

func (x *MachineMetricSystem) GetMemoryNodeBytesBuffers() uint64 {
	if x != nil {
		return x.MemoryNodeBytesBuffers
	}
	return 0
}

func (x *MachineMetricSystem) GetDiskNodeBytesTotal() uint64 {
	if x != nil {
		return x.DiskNodeBytesTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetDiskNodeBytesFree() uint64 {
	if x != nil {
		return x.DiskNodeBytesFree
	}
	return 0
}

func (x *MachineMetricSystem) GetDiskNodeIoSeconds() uint64 {
	if x != nil {
		return x.DiskNodeIoSeconds
	}
	return 0
}

func (x *MachineMetricSystem) GetDiskNodeReadsTotal() uint64 {
	if x != nil {
		return x.DiskNodeReadsTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetDiskNodeWritesTotal() uint64 {
	if x != nil {
		return x.DiskNodeWritesTotal
	}
	return 0
}

func (x *MachineMetricSystem) GetNetworkNodeBytesTotalReceive() uint64 {
	if x != nil {
		return x.NetworkNodeBytesTotalReceive
	}
	return 0
}

func (x *MachineMetricSystem) GetNetworkNodeBytesTotalTransmit() uint64 {
	if x != nil {
		return x.NetworkNodeBytesTotalTransmit
	}
	return 0
}

func (x *MachineMetricSystem) GetMiscNodeBootTsSeconds() uint64 {
	if x != nil {
		return x.MiscNodeBootTsSeconds
	}
	return 0
}

func (x *MachineMetricSystem) GetMiscOs() string {
	if x != nil {
		return x.MiscOs
	}
	return ""
}

func (x *MachineMetricSystem) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

type MachineMetricValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExporterVersion string `protobuf:"bytes,2,opt,name=exporter_version,json=exporterVersion,proto3" json:"exporter_version,omitempty"`
	// process
	CpuProcessSecondsTotal     uint64 `protobuf:"varint,3,opt,name=cpu_process_seconds_total,json=cpuProcessSecondsTotal,proto3" json:"cpu_process_seconds_total,omitempty"`
	MemoryProcessBytes         uint64 `protobuf:"varint,4,opt,name=memory_process_bytes,json=memoryProcessBytes,proto3" json:"memory_process_bytes,omitempty"`
	ClientName                 string `protobuf:"bytes,5,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion              string `protobuf:"bytes,6,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientBuild                uint64 `protobuf:"varint,7,opt,name=client_build,json=clientBuild,proto3" json:"client_build,omitempty"`
	SyncEth2FallbackConfigured bool   `protobuf:"varint,8,opt,name=sync_eth2_fallback_configured,json=syncEth2FallbackConfigured,proto3" json:"sync_eth2_fallback_configured,omitempty"`
	SyncEth2FallbackConnected  bool   `protobuf:"varint,9,opt,name=sync_eth2_fallback_connected,json=syncEth2FallbackConnected,proto3" json:"sync_eth2_fallback_connected,omitempty"`
	// validator
	ValidatorTotal  uint64 `protobuf:"varint,10,opt,name=validator_total,json=validatorTotal,proto3" json:"validator_total,omitempty"`
	ValidatorActive uint64 `protobuf:"varint,11,opt,name=validator_active,json=validatorActive,proto3" json:"validator_active,omitempty"`
	// do not store in bigtable but include them in generated model
	Machine *string `protobuf:"bytes,12,opt,name=machine,proto3,oneof" json:"machine,omitempty"`
}

func (x *MachineMetricValidator) Reset() {
	*x = MachineMetricValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineMetricValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineMetricValidator) ProtoMessage() {}

func (x *MachineMetricValidator) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineMetricValidator.ProtoReflect.Descriptor instead.
func (*MachineMetricValidator) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{1}
}

func (x *MachineMetricValidator) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MachineMetricValidator) GetExporterVersion() string {
	if x != nil {
		return x.ExporterVersion
	}
	return ""
}

func (x *MachineMetricValidator) GetCpuProcessSecondsTotal() uint64 {
	if x != nil {
		return x.CpuProcessSecondsTotal
	}
	return 0
}

func (x *MachineMetricValidator) GetMemoryProcessBytes() uint64 {
	if x != nil {
		return x.MemoryProcessBytes
	}
	return 0
}

func (x *MachineMetricValidator) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *MachineMetricValidator) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *MachineMetricValidator) GetClientBuild() uint64 {
	if x != nil {
		return x.ClientBuild
	}
	return 0
}

func (x *MachineMetricValidator) GetSyncEth2FallbackConfigured() bool {
	if x != nil {
		return x.SyncEth2FallbackConfigured
	}
	return false
}

func (x *MachineMetricValidator) GetSyncEth2FallbackConnected() bool {
	if x != nil {
		return x.SyncEth2FallbackConnected
	}
	return false
}

func (x *MachineMetricValidator) GetValidatorTotal() uint64 {
	if x != nil {
		return x.ValidatorTotal
	}
	return 0
}

func (x *MachineMetricValidator) GetValidatorActive() uint64 {
	if x != nil {
		return x.ValidatorActive
	}
	return 0
}

func (x *MachineMetricValidator) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

type MachineMetricNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExporterVersion string `protobuf:"bytes,2,opt,name=exporter_version,json=exporterVersion,proto3" json:"exporter_version,omitempty"`
	// process
	CpuProcessSecondsTotal     uint64 `protobuf:"varint,3,opt,name=cpu_process_seconds_total,json=cpuProcessSecondsTotal,proto3" json:"cpu_process_seconds_total,omitempty"`
	MemoryProcessBytes         uint64 `protobuf:"varint,4,opt,name=memory_process_bytes,json=memoryProcessBytes,proto3" json:"memory_process_bytes,omitempty"`
	ClientName                 string `protobuf:"bytes,5,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion              string `protobuf:"bytes,6,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientBuild                uint64 `protobuf:"varint,7,opt,name=client_build,json=clientBuild,proto3" json:"client_build,omitempty"`
	SyncEth2FallbackConfigured bool   `protobuf:"varint,8,opt,name=sync_eth2_fallback_configured,json=syncEth2FallbackConfigured,proto3" json:"sync_eth2_fallback_configured,omitempty"`
	SyncEth2FallbackConnected  bool   `protobuf:"varint,9,opt,name=sync_eth2_fallback_connected,json=syncEth2FallbackConnected,proto3" json:"sync_eth2_fallback_connected,omitempty"`
	// node
	DiskBeaconchainBytesTotal       uint64 `protobuf:"varint,10,opt,name=disk_beaconchain_bytes_total,json=diskBeaconchainBytesTotal,proto3" json:"disk_beaconchain_bytes_total,omitempty"`
	NetworkLibp2PBytesTotalReceive  uint64 `protobuf:"varint,11,opt,name=network_libp2p_bytes_total_receive,json=networkLibp2pBytesTotalReceive,proto3" json:"network_libp2p_bytes_total_receive,omitempty"`
	NetworkLibp2PBytesTotalTransmit uint64 `protobuf:"varint,12,opt,name=network_libp2p_bytes_total_transmit,json=networkLibp2pBytesTotalTransmit,proto3" json:"network_libp2p_bytes_total_transmit,omitempty"`
	NetworkPeersConnected           uint64 `protobuf:"varint,13,opt,name=network_peers_connected,json=networkPeersConnected,proto3" json:"network_peers_connected,omitempty"`
	SyncEth1Connected               bool   `protobuf:"varint,14,opt,name=sync_eth1_connected,json=syncEth1Connected,proto3" json:"sync_eth1_connected,omitempty"`
	SyncEth2Synced                  bool   `protobuf:"varint,15,opt,name=sync_eth2_synced,json=syncEth2Synced,proto3" json:"sync_eth2_synced,omitempty"`
	SyncBeaconHeadSlot              uint64 `protobuf:"varint,16,opt,name=sync_beacon_head_slot,json=syncBeaconHeadSlot,proto3" json:"sync_beacon_head_slot,omitempty"`
	SyncEth1FallbackConfigured      bool   `protobuf:"varint,17,opt,name=sync_eth1_fallback_configured,json=syncEth1FallbackConfigured,proto3" json:"sync_eth1_fallback_configured,omitempty"`
	SyncEth1FallbackConnected       bool   `protobuf:"varint,18,opt,name=sync_eth1_fallback_connected,json=syncEth1FallbackConnected,proto3" json:"sync_eth1_fallback_connected,omitempty"`
	// do not store in bigtable but include them in generated model
	Machine *string `protobuf:"bytes,19,opt,name=machine,proto3,oneof" json:"machine,omitempty"`
}

func (x *MachineMetricNode) Reset() {
	*x = MachineMetricNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineMetricNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineMetricNode) ProtoMessage() {}

func (x *MachineMetricNode) ProtoReflect() protoreflect.Message {
	mi := &file_machine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineMetricNode.ProtoReflect.Descriptor instead.
func (*MachineMetricNode) Descriptor() ([]byte, []int) {
	return file_machine_proto_rawDescGZIP(), []int{2}
}

func (x *MachineMetricNode) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MachineMetricNode) GetExporterVersion() string {
	if x != nil {
		return x.ExporterVersion
	}
	return ""
}

func (x *MachineMetricNode) GetCpuProcessSecondsTotal() uint64 {
	if x != nil {
		return x.CpuProcessSecondsTotal
	}
	return 0
}

func (x *MachineMetricNode) GetMemoryProcessBytes() uint64 {
	if x != nil {
		return x.MemoryProcessBytes
	}
	return 0
}

func (x *MachineMetricNode) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *MachineMetricNode) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *MachineMetricNode) GetClientBuild() uint64 {
	if x != nil {
		return x.ClientBuild
	}
	return 0
}

func (x *MachineMetricNode) GetSyncEth2FallbackConfigured() bool {
	if x != nil {
		return x.SyncEth2FallbackConfigured
	}
	return false
}

func (x *MachineMetricNode) GetSyncEth2FallbackConnected() bool {
	if x != nil {
		return x.SyncEth2FallbackConnected
	}
	return false
}

func (x *MachineMetricNode) GetDiskBeaconchainBytesTotal() uint64 {
	if x != nil {
		return x.DiskBeaconchainBytesTotal
	}
	return 0
}

func (x *MachineMetricNode) GetNetworkLibp2PBytesTotalReceive() uint64 {
	if x != nil {
		return x.NetworkLibp2PBytesTotalReceive
	}
	return 0
}

func (x *MachineMetricNode) GetNetworkLibp2PBytesTotalTransmit() uint64 {
	if x != nil {
		return x.NetworkLibp2PBytesTotalTransmit
	}
	return 0
}

func (x *MachineMetricNode) GetNetworkPeersConnected() uint64 {
	if x != nil {
		return x.NetworkPeersConnected
	}
	return 0
}

func (x *MachineMetricNode) GetSyncEth1Connected() bool {
	if x != nil {
		return x.SyncEth1Connected
	}
	return false
}

func (x *MachineMetricNode) GetSyncEth2Synced() bool {
	if x != nil {
		return x.SyncEth2Synced
	}
	return false
}

func (x *MachineMetricNode) GetSyncBeaconHeadSlot() uint64 {
	if x != nil {
		return x.SyncBeaconHeadSlot
	}
	return 0
}

func (x *MachineMetricNode) GetSyncEth1FallbackConfigured() bool {
	if x != nil {
		return x.SyncEth1FallbackConfigured
	}
	return false
}

func (x *MachineMetricNode) GetSyncEth1FallbackConnected() bool {
	if x != nil {
		return x.SyncEth1FallbackConnected
	}
	return false
}

func (x *MachineMetricNode) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

var File_machine_proto protoreflect.FileDescriptor

var file_machine_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x89, 0x09, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x70, 0x75, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x70,
	0x75, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x70, 0x75, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x70,
	0x75, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x70, 0x75, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x70,
	0x75, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x70, 0x75, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x70,
	0x75, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a,
	0x16, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64,
	0x69, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x69, 0x73, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x6f, 0x6f, 0x74, 0x54, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x6f, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x73, 0x63, 0x4f, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x16, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x70, 0x75, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x32, 0x5f, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x74, 0x68, 0x32, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x32, 0x5f, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x74, 0x68,
	0x32, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x22, 0x87, 0x08, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x19, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x65, 0x74, 0x68, 0x32, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x74, 0x68, 0x32, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x32, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x74, 0x68, 0x32, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4a, 0x0a,
	0x22, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x69, 0x62, 0x70, 0x32, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x79,
	0x6e, 0x63, 0x45, 0x74, 0x68, 0x31, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x32, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x74, 0x68, 0x32, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x1d,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x74, 0x68, 0x31, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x74, 0x68, 0x31, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_machine_proto_rawDescOnce sync.Once
	file_machine_proto_rawDescData = file_machine_proto_rawDesc
)

func file_machine_proto_rawDescGZIP() []byte {
	file_machine_proto_rawDescOnce.Do(func() {
		file_machine_proto_rawDescData = protoimpl.X.CompressGZIP(file_machine_proto_rawDescData)
	})
	return file_machine_proto_rawDescData
}

var file_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_machine_proto_goTypes = []interface{}{
	(*MachineMetricSystem)(nil),    // 0: types.MachineMetricSystem
	(*MachineMetricValidator)(nil), // 1: types.MachineMetricValidator
	(*MachineMetricNode)(nil),      // 2: types.MachineMetricNode
}
var file_machine_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_machine_proto_init() }
func file_machine_proto_init() {
	if File_machine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_machine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineMetricSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineMetricValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineMetricNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_machine_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_machine_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_machine_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machine_proto_goTypes,
		DependencyIndexes: file_machine_proto_depIdxs,
		MessageInfos:      file_machine_proto_msgTypes,
	}.Build()
	File_machine_proto = out.File
	file_machine_proto_rawDesc = nil
	file_machine_proto_goTypes = nil
	file_machine_proto_depIdxs = nil
}
